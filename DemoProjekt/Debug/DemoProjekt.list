
DemoProjekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08002d98  08002d98  00012d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e88  08002e88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e88  08002e88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e88  08002e88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002e9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002e9c  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000635c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000137f  00000000  00000000  00026390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000680  00000000  00000000  00027710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c8  00000000  00000000  00027d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000104e9  00000000  00000000  00028358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000066c1  00000000  00000000  00038841  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00060fbe  00000000  00000000  0003ef02  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009fec0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001758  00000000  00000000  0009ff3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d80 	.word	0x08002d80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d80 	.word	0x08002d80

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f9bb 	bl	80005a4 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f93d 	bl	80004b8 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f9ad 	bl	80005a4 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9a3 	bl	80005a4 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f94b 	bl	8000508 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f941 	bl	8000508 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fdiv>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	4657      	mov	r7, sl
 8000298:	464e      	mov	r6, r9
 800029a:	4645      	mov	r5, r8
 800029c:	46de      	mov	lr, fp
 800029e:	0244      	lsls	r4, r0, #9
 80002a0:	b5e0      	push	{r5, r6, r7, lr}
 80002a2:	0046      	lsls	r6, r0, #1
 80002a4:	4688      	mov	r8, r1
 80002a6:	0a64      	lsrs	r4, r4, #9
 80002a8:	0e36      	lsrs	r6, r6, #24
 80002aa:	0fc7      	lsrs	r7, r0, #31
 80002ac:	2e00      	cmp	r6, #0
 80002ae:	d063      	beq.n	8000378 <__aeabi_fdiv+0xe4>
 80002b0:	2eff      	cmp	r6, #255	; 0xff
 80002b2:	d024      	beq.n	80002fe <__aeabi_fdiv+0x6a>
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	00e4      	lsls	r4, r4, #3
 80002b8:	04db      	lsls	r3, r3, #19
 80002ba:	431c      	orrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	4699      	mov	r9, r3
 80002c0:	469b      	mov	fp, r3
 80002c2:	3e7f      	subs	r6, #127	; 0x7f
 80002c4:	4643      	mov	r3, r8
 80002c6:	4642      	mov	r2, r8
 80002c8:	025d      	lsls	r5, r3, #9
 80002ca:	0fd2      	lsrs	r2, r2, #31
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	0a6d      	lsrs	r5, r5, #9
 80002d0:	0e1b      	lsrs	r3, r3, #24
 80002d2:	4690      	mov	r8, r2
 80002d4:	4692      	mov	sl, r2
 80002d6:	d065      	beq.n	80003a4 <__aeabi_fdiv+0x110>
 80002d8:	2bff      	cmp	r3, #255	; 0xff
 80002da:	d055      	beq.n	8000388 <__aeabi_fdiv+0xf4>
 80002dc:	2280      	movs	r2, #128	; 0x80
 80002de:	2100      	movs	r1, #0
 80002e0:	00ed      	lsls	r5, r5, #3
 80002e2:	04d2      	lsls	r2, r2, #19
 80002e4:	3b7f      	subs	r3, #127	; 0x7f
 80002e6:	4315      	orrs	r5, r2
 80002e8:	1af6      	subs	r6, r6, r3
 80002ea:	4643      	mov	r3, r8
 80002ec:	464a      	mov	r2, r9
 80002ee:	407b      	eors	r3, r7
 80002f0:	2a0f      	cmp	r2, #15
 80002f2:	d900      	bls.n	80002f6 <__aeabi_fdiv+0x62>
 80002f4:	e08d      	b.n	8000412 <__aeabi_fdiv+0x17e>
 80002f6:	486d      	ldr	r0, [pc, #436]	; (80004ac <__aeabi_fdiv+0x218>)
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	5882      	ldr	r2, [r0, r2]
 80002fc:	4697      	mov	pc, r2
 80002fe:	2c00      	cmp	r4, #0
 8000300:	d154      	bne.n	80003ac <__aeabi_fdiv+0x118>
 8000302:	2308      	movs	r3, #8
 8000304:	4699      	mov	r9, r3
 8000306:	3b06      	subs	r3, #6
 8000308:	26ff      	movs	r6, #255	; 0xff
 800030a:	469b      	mov	fp, r3
 800030c:	e7da      	b.n	80002c4 <__aeabi_fdiv+0x30>
 800030e:	2500      	movs	r5, #0
 8000310:	4653      	mov	r3, sl
 8000312:	2902      	cmp	r1, #2
 8000314:	d01b      	beq.n	800034e <__aeabi_fdiv+0xba>
 8000316:	2903      	cmp	r1, #3
 8000318:	d100      	bne.n	800031c <__aeabi_fdiv+0x88>
 800031a:	e0bf      	b.n	800049c <__aeabi_fdiv+0x208>
 800031c:	2901      	cmp	r1, #1
 800031e:	d028      	beq.n	8000372 <__aeabi_fdiv+0xde>
 8000320:	0030      	movs	r0, r6
 8000322:	307f      	adds	r0, #127	; 0x7f
 8000324:	2800      	cmp	r0, #0
 8000326:	dd20      	ble.n	800036a <__aeabi_fdiv+0xd6>
 8000328:	076a      	lsls	r2, r5, #29
 800032a:	d004      	beq.n	8000336 <__aeabi_fdiv+0xa2>
 800032c:	220f      	movs	r2, #15
 800032e:	402a      	ands	r2, r5
 8000330:	2a04      	cmp	r2, #4
 8000332:	d000      	beq.n	8000336 <__aeabi_fdiv+0xa2>
 8000334:	3504      	adds	r5, #4
 8000336:	012a      	lsls	r2, r5, #4
 8000338:	d503      	bpl.n	8000342 <__aeabi_fdiv+0xae>
 800033a:	0030      	movs	r0, r6
 800033c:	4a5c      	ldr	r2, [pc, #368]	; (80004b0 <__aeabi_fdiv+0x21c>)
 800033e:	3080      	adds	r0, #128	; 0x80
 8000340:	4015      	ands	r5, r2
 8000342:	28fe      	cmp	r0, #254	; 0xfe
 8000344:	dc03      	bgt.n	800034e <__aeabi_fdiv+0xba>
 8000346:	01ac      	lsls	r4, r5, #6
 8000348:	0a64      	lsrs	r4, r4, #9
 800034a:	b2c2      	uxtb	r2, r0
 800034c:	e001      	b.n	8000352 <__aeabi_fdiv+0xbe>
 800034e:	22ff      	movs	r2, #255	; 0xff
 8000350:	2400      	movs	r4, #0
 8000352:	0264      	lsls	r4, r4, #9
 8000354:	05d2      	lsls	r2, r2, #23
 8000356:	0a60      	lsrs	r0, r4, #9
 8000358:	07db      	lsls	r3, r3, #31
 800035a:	4310      	orrs	r0, r2
 800035c:	4318      	orrs	r0, r3
 800035e:	bc3c      	pop	{r2, r3, r4, r5}
 8000360:	4690      	mov	r8, r2
 8000362:	4699      	mov	r9, r3
 8000364:	46a2      	mov	sl, r4
 8000366:	46ab      	mov	fp, r5
 8000368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800036a:	2201      	movs	r2, #1
 800036c:	1a10      	subs	r0, r2, r0
 800036e:	281b      	cmp	r0, #27
 8000370:	dd7c      	ble.n	800046c <__aeabi_fdiv+0x1d8>
 8000372:	2200      	movs	r2, #0
 8000374:	2400      	movs	r4, #0
 8000376:	e7ec      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000378:	2c00      	cmp	r4, #0
 800037a:	d11d      	bne.n	80003b8 <__aeabi_fdiv+0x124>
 800037c:	2304      	movs	r3, #4
 800037e:	4699      	mov	r9, r3
 8000380:	3b03      	subs	r3, #3
 8000382:	2600      	movs	r6, #0
 8000384:	469b      	mov	fp, r3
 8000386:	e79d      	b.n	80002c4 <__aeabi_fdiv+0x30>
 8000388:	3eff      	subs	r6, #255	; 0xff
 800038a:	2d00      	cmp	r5, #0
 800038c:	d120      	bne.n	80003d0 <__aeabi_fdiv+0x13c>
 800038e:	2102      	movs	r1, #2
 8000390:	4643      	mov	r3, r8
 8000392:	464a      	mov	r2, r9
 8000394:	407b      	eors	r3, r7
 8000396:	430a      	orrs	r2, r1
 8000398:	2a0f      	cmp	r2, #15
 800039a:	d8d8      	bhi.n	800034e <__aeabi_fdiv+0xba>
 800039c:	4845      	ldr	r0, [pc, #276]	; (80004b4 <__aeabi_fdiv+0x220>)
 800039e:	0092      	lsls	r2, r2, #2
 80003a0:	5882      	ldr	r2, [r0, r2]
 80003a2:	4697      	mov	pc, r2
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d119      	bne.n	80003dc <__aeabi_fdiv+0x148>
 80003a8:	2101      	movs	r1, #1
 80003aa:	e7f1      	b.n	8000390 <__aeabi_fdiv+0xfc>
 80003ac:	230c      	movs	r3, #12
 80003ae:	4699      	mov	r9, r3
 80003b0:	3b09      	subs	r3, #9
 80003b2:	26ff      	movs	r6, #255	; 0xff
 80003b4:	469b      	mov	fp, r3
 80003b6:	e785      	b.n	80002c4 <__aeabi_fdiv+0x30>
 80003b8:	0020      	movs	r0, r4
 80003ba:	f000 fc79 	bl	8000cb0 <__clzsi2>
 80003be:	2676      	movs	r6, #118	; 0x76
 80003c0:	1f43      	subs	r3, r0, #5
 80003c2:	409c      	lsls	r4, r3
 80003c4:	2300      	movs	r3, #0
 80003c6:	4276      	negs	r6, r6
 80003c8:	1a36      	subs	r6, r6, r0
 80003ca:	4699      	mov	r9, r3
 80003cc:	469b      	mov	fp, r3
 80003ce:	e779      	b.n	80002c4 <__aeabi_fdiv+0x30>
 80003d0:	464a      	mov	r2, r9
 80003d2:	2303      	movs	r3, #3
 80003d4:	431a      	orrs	r2, r3
 80003d6:	4691      	mov	r9, r2
 80003d8:	2103      	movs	r1, #3
 80003da:	e786      	b.n	80002ea <__aeabi_fdiv+0x56>
 80003dc:	0028      	movs	r0, r5
 80003de:	f000 fc67 	bl	8000cb0 <__clzsi2>
 80003e2:	1f43      	subs	r3, r0, #5
 80003e4:	1836      	adds	r6, r6, r0
 80003e6:	409d      	lsls	r5, r3
 80003e8:	3676      	adds	r6, #118	; 0x76
 80003ea:	2100      	movs	r1, #0
 80003ec:	e77d      	b.n	80002ea <__aeabi_fdiv+0x56>
 80003ee:	2480      	movs	r4, #128	; 0x80
 80003f0:	2300      	movs	r3, #0
 80003f2:	03e4      	lsls	r4, r4, #15
 80003f4:	22ff      	movs	r2, #255	; 0xff
 80003f6:	e7ac      	b.n	8000352 <__aeabi_fdiv+0xbe>
 80003f8:	2500      	movs	r5, #0
 80003fa:	2380      	movs	r3, #128	; 0x80
 80003fc:	03db      	lsls	r3, r3, #15
 80003fe:	421c      	tst	r4, r3
 8000400:	d028      	beq.n	8000454 <__aeabi_fdiv+0x1c0>
 8000402:	421d      	tst	r5, r3
 8000404:	d126      	bne.n	8000454 <__aeabi_fdiv+0x1c0>
 8000406:	432b      	orrs	r3, r5
 8000408:	025c      	lsls	r4, r3, #9
 800040a:	0a64      	lsrs	r4, r4, #9
 800040c:	4643      	mov	r3, r8
 800040e:	22ff      	movs	r2, #255	; 0xff
 8000410:	e79f      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000412:	0162      	lsls	r2, r4, #5
 8000414:	016c      	lsls	r4, r5, #5
 8000416:	42a2      	cmp	r2, r4
 8000418:	d224      	bcs.n	8000464 <__aeabi_fdiv+0x1d0>
 800041a:	211b      	movs	r1, #27
 800041c:	2500      	movs	r5, #0
 800041e:	3e01      	subs	r6, #1
 8000420:	2701      	movs	r7, #1
 8000422:	0010      	movs	r0, r2
 8000424:	006d      	lsls	r5, r5, #1
 8000426:	0052      	lsls	r2, r2, #1
 8000428:	2800      	cmp	r0, #0
 800042a:	db01      	blt.n	8000430 <__aeabi_fdiv+0x19c>
 800042c:	4294      	cmp	r4, r2
 800042e:	d801      	bhi.n	8000434 <__aeabi_fdiv+0x1a0>
 8000430:	1b12      	subs	r2, r2, r4
 8000432:	433d      	orrs	r5, r7
 8000434:	3901      	subs	r1, #1
 8000436:	2900      	cmp	r1, #0
 8000438:	d1f3      	bne.n	8000422 <__aeabi_fdiv+0x18e>
 800043a:	0014      	movs	r4, r2
 800043c:	1e62      	subs	r2, r4, #1
 800043e:	4194      	sbcs	r4, r2
 8000440:	4325      	orrs	r5, r4
 8000442:	e76d      	b.n	8000320 <__aeabi_fdiv+0x8c>
 8000444:	46ba      	mov	sl, r7
 8000446:	4659      	mov	r1, fp
 8000448:	0025      	movs	r5, r4
 800044a:	4653      	mov	r3, sl
 800044c:	2902      	cmp	r1, #2
 800044e:	d000      	beq.n	8000452 <__aeabi_fdiv+0x1be>
 8000450:	e761      	b.n	8000316 <__aeabi_fdiv+0x82>
 8000452:	e77c      	b.n	800034e <__aeabi_fdiv+0xba>
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	03db      	lsls	r3, r3, #15
 8000458:	431c      	orrs	r4, r3
 800045a:	0264      	lsls	r4, r4, #9
 800045c:	0a64      	lsrs	r4, r4, #9
 800045e:	003b      	movs	r3, r7
 8000460:	22ff      	movs	r2, #255	; 0xff
 8000462:	e776      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000464:	1b12      	subs	r2, r2, r4
 8000466:	211a      	movs	r1, #26
 8000468:	2501      	movs	r5, #1
 800046a:	e7d9      	b.n	8000420 <__aeabi_fdiv+0x18c>
 800046c:	369e      	adds	r6, #158	; 0x9e
 800046e:	002a      	movs	r2, r5
 8000470:	40b5      	lsls	r5, r6
 8000472:	002c      	movs	r4, r5
 8000474:	40c2      	lsrs	r2, r0
 8000476:	1e65      	subs	r5, r4, #1
 8000478:	41ac      	sbcs	r4, r5
 800047a:	4314      	orrs	r4, r2
 800047c:	0762      	lsls	r2, r4, #29
 800047e:	d004      	beq.n	800048a <__aeabi_fdiv+0x1f6>
 8000480:	220f      	movs	r2, #15
 8000482:	4022      	ands	r2, r4
 8000484:	2a04      	cmp	r2, #4
 8000486:	d000      	beq.n	800048a <__aeabi_fdiv+0x1f6>
 8000488:	3404      	adds	r4, #4
 800048a:	0162      	lsls	r2, r4, #5
 800048c:	d403      	bmi.n	8000496 <__aeabi_fdiv+0x202>
 800048e:	01a4      	lsls	r4, r4, #6
 8000490:	0a64      	lsrs	r4, r4, #9
 8000492:	2200      	movs	r2, #0
 8000494:	e75d      	b.n	8000352 <__aeabi_fdiv+0xbe>
 8000496:	2201      	movs	r2, #1
 8000498:	2400      	movs	r4, #0
 800049a:	e75a      	b.n	8000352 <__aeabi_fdiv+0xbe>
 800049c:	2480      	movs	r4, #128	; 0x80
 800049e:	03e4      	lsls	r4, r4, #15
 80004a0:	432c      	orrs	r4, r5
 80004a2:	0264      	lsls	r4, r4, #9
 80004a4:	0a64      	lsrs	r4, r4, #9
 80004a6:	22ff      	movs	r2, #255	; 0xff
 80004a8:	e753      	b.n	8000352 <__aeabi_fdiv+0xbe>
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	08002db8 	.word	0x08002db8
 80004b0:	f7ffffff 	.word	0xf7ffffff
 80004b4:	08002df8 	.word	0x08002df8

080004b8 <__eqsf2>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	0042      	lsls	r2, r0, #1
 80004bc:	024e      	lsls	r6, r1, #9
 80004be:	004c      	lsls	r4, r1, #1
 80004c0:	0245      	lsls	r5, r0, #9
 80004c2:	0a6d      	lsrs	r5, r5, #9
 80004c4:	0e12      	lsrs	r2, r2, #24
 80004c6:	0fc3      	lsrs	r3, r0, #31
 80004c8:	0a76      	lsrs	r6, r6, #9
 80004ca:	0e24      	lsrs	r4, r4, #24
 80004cc:	0fc9      	lsrs	r1, r1, #31
 80004ce:	2aff      	cmp	r2, #255	; 0xff
 80004d0:	d00f      	beq.n	80004f2 <__eqsf2+0x3a>
 80004d2:	2cff      	cmp	r4, #255	; 0xff
 80004d4:	d011      	beq.n	80004fa <__eqsf2+0x42>
 80004d6:	2001      	movs	r0, #1
 80004d8:	42a2      	cmp	r2, r4
 80004da:	d000      	beq.n	80004de <__eqsf2+0x26>
 80004dc:	bd70      	pop	{r4, r5, r6, pc}
 80004de:	42b5      	cmp	r5, r6
 80004e0:	d1fc      	bne.n	80004dc <__eqsf2+0x24>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d00d      	beq.n	8000502 <__eqsf2+0x4a>
 80004e6:	2a00      	cmp	r2, #0
 80004e8:	d1f8      	bne.n	80004dc <__eqsf2+0x24>
 80004ea:	0028      	movs	r0, r5
 80004ec:	1e45      	subs	r5, r0, #1
 80004ee:	41a8      	sbcs	r0, r5
 80004f0:	e7f4      	b.n	80004dc <__eqsf2+0x24>
 80004f2:	2001      	movs	r0, #1
 80004f4:	2d00      	cmp	r5, #0
 80004f6:	d1f1      	bne.n	80004dc <__eqsf2+0x24>
 80004f8:	e7eb      	b.n	80004d2 <__eqsf2+0x1a>
 80004fa:	2001      	movs	r0, #1
 80004fc:	2e00      	cmp	r6, #0
 80004fe:	d1ed      	bne.n	80004dc <__eqsf2+0x24>
 8000500:	e7e9      	b.n	80004d6 <__eqsf2+0x1e>
 8000502:	2000      	movs	r0, #0
 8000504:	e7ea      	b.n	80004dc <__eqsf2+0x24>
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__gesf2>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	004a      	lsls	r2, r1, #1
 800050c:	024e      	lsls	r6, r1, #9
 800050e:	0245      	lsls	r5, r0, #9
 8000510:	0044      	lsls	r4, r0, #1
 8000512:	0a6d      	lsrs	r5, r5, #9
 8000514:	0e24      	lsrs	r4, r4, #24
 8000516:	0fc3      	lsrs	r3, r0, #31
 8000518:	0a76      	lsrs	r6, r6, #9
 800051a:	0e12      	lsrs	r2, r2, #24
 800051c:	0fc9      	lsrs	r1, r1, #31
 800051e:	2cff      	cmp	r4, #255	; 0xff
 8000520:	d015      	beq.n	800054e <__gesf2+0x46>
 8000522:	2aff      	cmp	r2, #255	; 0xff
 8000524:	d00e      	beq.n	8000544 <__gesf2+0x3c>
 8000526:	2c00      	cmp	r4, #0
 8000528:	d115      	bne.n	8000556 <__gesf2+0x4e>
 800052a:	2a00      	cmp	r2, #0
 800052c:	d101      	bne.n	8000532 <__gesf2+0x2a>
 800052e:	2e00      	cmp	r6, #0
 8000530:	d01c      	beq.n	800056c <__gesf2+0x64>
 8000532:	2d00      	cmp	r5, #0
 8000534:	d014      	beq.n	8000560 <__gesf2+0x58>
 8000536:	428b      	cmp	r3, r1
 8000538:	d027      	beq.n	800058a <__gesf2+0x82>
 800053a:	2002      	movs	r0, #2
 800053c:	3b01      	subs	r3, #1
 800053e:	4018      	ands	r0, r3
 8000540:	3801      	subs	r0, #1
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	2e00      	cmp	r6, #0
 8000546:	d0ee      	beq.n	8000526 <__gesf2+0x1e>
 8000548:	2002      	movs	r0, #2
 800054a:	4240      	negs	r0, r0
 800054c:	e7f9      	b.n	8000542 <__gesf2+0x3a>
 800054e:	2d00      	cmp	r5, #0
 8000550:	d1fa      	bne.n	8000548 <__gesf2+0x40>
 8000552:	2aff      	cmp	r2, #255	; 0xff
 8000554:	d00e      	beq.n	8000574 <__gesf2+0x6c>
 8000556:	2a00      	cmp	r2, #0
 8000558:	d10e      	bne.n	8000578 <__gesf2+0x70>
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0ed      	beq.n	800053a <__gesf2+0x32>
 800055e:	e00b      	b.n	8000578 <__gesf2+0x70>
 8000560:	2301      	movs	r3, #1
 8000562:	3901      	subs	r1, #1
 8000564:	4399      	bics	r1, r3
 8000566:	0008      	movs	r0, r1
 8000568:	3001      	adds	r0, #1
 800056a:	e7ea      	b.n	8000542 <__gesf2+0x3a>
 800056c:	2000      	movs	r0, #0
 800056e:	2d00      	cmp	r5, #0
 8000570:	d0e7      	beq.n	8000542 <__gesf2+0x3a>
 8000572:	e7e2      	b.n	800053a <__gesf2+0x32>
 8000574:	2e00      	cmp	r6, #0
 8000576:	d1e7      	bne.n	8000548 <__gesf2+0x40>
 8000578:	428b      	cmp	r3, r1
 800057a:	d1de      	bne.n	800053a <__gesf2+0x32>
 800057c:	4294      	cmp	r4, r2
 800057e:	dd05      	ble.n	800058c <__gesf2+0x84>
 8000580:	2102      	movs	r1, #2
 8000582:	1e58      	subs	r0, r3, #1
 8000584:	4008      	ands	r0, r1
 8000586:	3801      	subs	r0, #1
 8000588:	e7db      	b.n	8000542 <__gesf2+0x3a>
 800058a:	2400      	movs	r4, #0
 800058c:	42a2      	cmp	r2, r4
 800058e:	dc04      	bgt.n	800059a <__gesf2+0x92>
 8000590:	42b5      	cmp	r5, r6
 8000592:	d8d2      	bhi.n	800053a <__gesf2+0x32>
 8000594:	2000      	movs	r0, #0
 8000596:	42b5      	cmp	r5, r6
 8000598:	d2d3      	bcs.n	8000542 <__gesf2+0x3a>
 800059a:	1e58      	subs	r0, r3, #1
 800059c:	2301      	movs	r3, #1
 800059e:	4398      	bics	r0, r3
 80005a0:	3001      	adds	r0, #1
 80005a2:	e7ce      	b.n	8000542 <__gesf2+0x3a>

080005a4 <__lesf2>:
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	0042      	lsls	r2, r0, #1
 80005a8:	0244      	lsls	r4, r0, #9
 80005aa:	024d      	lsls	r5, r1, #9
 80005ac:	0fc3      	lsrs	r3, r0, #31
 80005ae:	0048      	lsls	r0, r1, #1
 80005b0:	0a64      	lsrs	r4, r4, #9
 80005b2:	0e12      	lsrs	r2, r2, #24
 80005b4:	0a6d      	lsrs	r5, r5, #9
 80005b6:	0e00      	lsrs	r0, r0, #24
 80005b8:	0fc9      	lsrs	r1, r1, #31
 80005ba:	2aff      	cmp	r2, #255	; 0xff
 80005bc:	d012      	beq.n	80005e4 <__lesf2+0x40>
 80005be:	28ff      	cmp	r0, #255	; 0xff
 80005c0:	d00c      	beq.n	80005dc <__lesf2+0x38>
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	d112      	bne.n	80005ec <__lesf2+0x48>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d119      	bne.n	80005fe <__lesf2+0x5a>
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d117      	bne.n	80005fe <__lesf2+0x5a>
 80005ce:	2c00      	cmp	r4, #0
 80005d0:	d02b      	beq.n	800062a <__lesf2+0x86>
 80005d2:	2002      	movs	r0, #2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	4018      	ands	r0, r3
 80005d8:	3801      	subs	r0, #1
 80005da:	e026      	b.n	800062a <__lesf2+0x86>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d0f0      	beq.n	80005c2 <__lesf2+0x1e>
 80005e0:	2002      	movs	r0, #2
 80005e2:	e022      	b.n	800062a <__lesf2+0x86>
 80005e4:	2c00      	cmp	r4, #0
 80005e6:	d1fb      	bne.n	80005e0 <__lesf2+0x3c>
 80005e8:	28ff      	cmp	r0, #255	; 0xff
 80005ea:	d01f      	beq.n	800062c <__lesf2+0x88>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d11f      	bne.n	8000630 <__lesf2+0x8c>
 80005f0:	2d00      	cmp	r5, #0
 80005f2:	d11d      	bne.n	8000630 <__lesf2+0x8c>
 80005f4:	2002      	movs	r0, #2
 80005f6:	3b01      	subs	r3, #1
 80005f8:	4018      	ands	r0, r3
 80005fa:	3801      	subs	r0, #1
 80005fc:	e015      	b.n	800062a <__lesf2+0x86>
 80005fe:	2c00      	cmp	r4, #0
 8000600:	d00e      	beq.n	8000620 <__lesf2+0x7c>
 8000602:	428b      	cmp	r3, r1
 8000604:	d1e5      	bne.n	80005d2 <__lesf2+0x2e>
 8000606:	2200      	movs	r2, #0
 8000608:	4290      	cmp	r0, r2
 800060a:	dc04      	bgt.n	8000616 <__lesf2+0x72>
 800060c:	42ac      	cmp	r4, r5
 800060e:	d8e0      	bhi.n	80005d2 <__lesf2+0x2e>
 8000610:	2000      	movs	r0, #0
 8000612:	42ac      	cmp	r4, r5
 8000614:	d209      	bcs.n	800062a <__lesf2+0x86>
 8000616:	1e58      	subs	r0, r3, #1
 8000618:	2301      	movs	r3, #1
 800061a:	4398      	bics	r0, r3
 800061c:	3001      	adds	r0, #1
 800061e:	e004      	b.n	800062a <__lesf2+0x86>
 8000620:	2301      	movs	r3, #1
 8000622:	3901      	subs	r1, #1
 8000624:	4399      	bics	r1, r3
 8000626:	0008      	movs	r0, r1
 8000628:	3001      	adds	r0, #1
 800062a:	bd30      	pop	{r4, r5, pc}
 800062c:	2d00      	cmp	r5, #0
 800062e:	d1d7      	bne.n	80005e0 <__lesf2+0x3c>
 8000630:	428b      	cmp	r3, r1
 8000632:	d1ce      	bne.n	80005d2 <__lesf2+0x2e>
 8000634:	4282      	cmp	r2, r0
 8000636:	dde7      	ble.n	8000608 <__lesf2+0x64>
 8000638:	2102      	movs	r1, #2
 800063a:	1e58      	subs	r0, r3, #1
 800063c:	4008      	ands	r0, r1
 800063e:	3801      	subs	r0, #1
 8000640:	e7f3      	b.n	800062a <__lesf2+0x86>
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <__aeabi_fmul>:
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	464e      	mov	r6, r9
 8000648:	4657      	mov	r7, sl
 800064a:	4645      	mov	r5, r8
 800064c:	46de      	mov	lr, fp
 800064e:	b5e0      	push	{r5, r6, r7, lr}
 8000650:	0243      	lsls	r3, r0, #9
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	0045      	lsls	r5, r0, #1
 8000656:	b083      	sub	sp, #12
 8000658:	1c0f      	adds	r7, r1, #0
 800065a:	4699      	mov	r9, r3
 800065c:	0e2d      	lsrs	r5, r5, #24
 800065e:	0fc6      	lsrs	r6, r0, #31
 8000660:	2d00      	cmp	r5, #0
 8000662:	d057      	beq.n	8000714 <__aeabi_fmul+0xd0>
 8000664:	2dff      	cmp	r5, #255	; 0xff
 8000666:	d024      	beq.n	80006b2 <__aeabi_fmul+0x6e>
 8000668:	2080      	movs	r0, #128	; 0x80
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	04c0      	lsls	r0, r0, #19
 800066e:	4318      	orrs	r0, r3
 8000670:	2300      	movs	r3, #0
 8000672:	4681      	mov	r9, r0
 8000674:	469a      	mov	sl, r3
 8000676:	469b      	mov	fp, r3
 8000678:	3d7f      	subs	r5, #127	; 0x7f
 800067a:	027c      	lsls	r4, r7, #9
 800067c:	007a      	lsls	r2, r7, #1
 800067e:	0ffb      	lsrs	r3, r7, #31
 8000680:	0a64      	lsrs	r4, r4, #9
 8000682:	0e12      	lsrs	r2, r2, #24
 8000684:	4698      	mov	r8, r3
 8000686:	d023      	beq.n	80006d0 <__aeabi_fmul+0x8c>
 8000688:	2aff      	cmp	r2, #255	; 0xff
 800068a:	d04b      	beq.n	8000724 <__aeabi_fmul+0xe0>
 800068c:	00e3      	lsls	r3, r4, #3
 800068e:	2480      	movs	r4, #128	; 0x80
 8000690:	2000      	movs	r0, #0
 8000692:	04e4      	lsls	r4, r4, #19
 8000694:	3a7f      	subs	r2, #127	; 0x7f
 8000696:	431c      	orrs	r4, r3
 8000698:	18ad      	adds	r5, r5, r2
 800069a:	1c6b      	adds	r3, r5, #1
 800069c:	4647      	mov	r7, r8
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	4653      	mov	r3, sl
 80006a2:	4077      	eors	r7, r6
 80006a4:	003a      	movs	r2, r7
 80006a6:	2b0f      	cmp	r3, #15
 80006a8:	d848      	bhi.n	800073c <__aeabi_fmul+0xf8>
 80006aa:	497d      	ldr	r1, [pc, #500]	; (80008a0 <__aeabi_fmul+0x25c>)
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	58cb      	ldr	r3, [r1, r3]
 80006b0:	469f      	mov	pc, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d000      	beq.n	80006b8 <__aeabi_fmul+0x74>
 80006b6:	e085      	b.n	80007c4 <__aeabi_fmul+0x180>
 80006b8:	3308      	adds	r3, #8
 80006ba:	469a      	mov	sl, r3
 80006bc:	3b06      	subs	r3, #6
 80006be:	469b      	mov	fp, r3
 80006c0:	027c      	lsls	r4, r7, #9
 80006c2:	007a      	lsls	r2, r7, #1
 80006c4:	0ffb      	lsrs	r3, r7, #31
 80006c6:	25ff      	movs	r5, #255	; 0xff
 80006c8:	0a64      	lsrs	r4, r4, #9
 80006ca:	0e12      	lsrs	r2, r2, #24
 80006cc:	4698      	mov	r8, r3
 80006ce:	d1db      	bne.n	8000688 <__aeabi_fmul+0x44>
 80006d0:	2c00      	cmp	r4, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_fmul+0x92>
 80006d4:	e090      	b.n	80007f8 <__aeabi_fmul+0x1b4>
 80006d6:	4652      	mov	r2, sl
 80006d8:	2301      	movs	r3, #1
 80006da:	431a      	orrs	r2, r3
 80006dc:	4692      	mov	sl, r2
 80006de:	2001      	movs	r0, #1
 80006e0:	e7db      	b.n	800069a <__aeabi_fmul+0x56>
 80006e2:	464c      	mov	r4, r9
 80006e4:	4658      	mov	r0, fp
 80006e6:	0017      	movs	r7, r2
 80006e8:	2802      	cmp	r0, #2
 80006ea:	d024      	beq.n	8000736 <__aeabi_fmul+0xf2>
 80006ec:	2803      	cmp	r0, #3
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fmul+0xae>
 80006f0:	e0cf      	b.n	8000892 <__aeabi_fmul+0x24e>
 80006f2:	2200      	movs	r2, #0
 80006f4:	2300      	movs	r3, #0
 80006f6:	2801      	cmp	r0, #1
 80006f8:	d14d      	bne.n	8000796 <__aeabi_fmul+0x152>
 80006fa:	0258      	lsls	r0, r3, #9
 80006fc:	05d2      	lsls	r2, r2, #23
 80006fe:	0a40      	lsrs	r0, r0, #9
 8000700:	07ff      	lsls	r7, r7, #31
 8000702:	4310      	orrs	r0, r2
 8000704:	4338      	orrs	r0, r7
 8000706:	b003      	add	sp, #12
 8000708:	bc3c      	pop	{r2, r3, r4, r5}
 800070a:	4690      	mov	r8, r2
 800070c:	4699      	mov	r9, r3
 800070e:	46a2      	mov	sl, r4
 8000710:	46ab      	mov	fp, r5
 8000712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000714:	2b00      	cmp	r3, #0
 8000716:	d15b      	bne.n	80007d0 <__aeabi_fmul+0x18c>
 8000718:	2304      	movs	r3, #4
 800071a:	469a      	mov	sl, r3
 800071c:	3b03      	subs	r3, #3
 800071e:	2500      	movs	r5, #0
 8000720:	469b      	mov	fp, r3
 8000722:	e7aa      	b.n	800067a <__aeabi_fmul+0x36>
 8000724:	35ff      	adds	r5, #255	; 0xff
 8000726:	2c00      	cmp	r4, #0
 8000728:	d160      	bne.n	80007ec <__aeabi_fmul+0x1a8>
 800072a:	4652      	mov	r2, sl
 800072c:	2302      	movs	r3, #2
 800072e:	431a      	orrs	r2, r3
 8000730:	4692      	mov	sl, r2
 8000732:	2002      	movs	r0, #2
 8000734:	e7b1      	b.n	800069a <__aeabi_fmul+0x56>
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	2300      	movs	r3, #0
 800073a:	e7de      	b.n	80006fa <__aeabi_fmul+0xb6>
 800073c:	464b      	mov	r3, r9
 800073e:	0c1b      	lsrs	r3, r3, #16
 8000740:	469c      	mov	ip, r3
 8000742:	464b      	mov	r3, r9
 8000744:	0426      	lsls	r6, r4, #16
 8000746:	0c36      	lsrs	r6, r6, #16
 8000748:	0418      	lsls	r0, r3, #16
 800074a:	4661      	mov	r1, ip
 800074c:	0033      	movs	r3, r6
 800074e:	0c22      	lsrs	r2, r4, #16
 8000750:	4664      	mov	r4, ip
 8000752:	0c00      	lsrs	r0, r0, #16
 8000754:	4343      	muls	r3, r0
 8000756:	434e      	muls	r6, r1
 8000758:	4350      	muls	r0, r2
 800075a:	4354      	muls	r4, r2
 800075c:	1980      	adds	r0, r0, r6
 800075e:	0c1a      	lsrs	r2, r3, #16
 8000760:	1812      	adds	r2, r2, r0
 8000762:	4296      	cmp	r6, r2
 8000764:	d903      	bls.n	800076e <__aeabi_fmul+0x12a>
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0249      	lsls	r1, r1, #9
 800076a:	468c      	mov	ip, r1
 800076c:	4464      	add	r4, ip
 800076e:	041b      	lsls	r3, r3, #16
 8000770:	0c1b      	lsrs	r3, r3, #16
 8000772:	0410      	lsls	r0, r2, #16
 8000774:	18c0      	adds	r0, r0, r3
 8000776:	0183      	lsls	r3, r0, #6
 8000778:	1e5e      	subs	r6, r3, #1
 800077a:	41b3      	sbcs	r3, r6
 800077c:	0e80      	lsrs	r0, r0, #26
 800077e:	4318      	orrs	r0, r3
 8000780:	0c13      	lsrs	r3, r2, #16
 8000782:	191b      	adds	r3, r3, r4
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	4303      	orrs	r3, r0
 8000788:	001c      	movs	r4, r3
 800078a:	0123      	lsls	r3, r4, #4
 800078c:	d579      	bpl.n	8000882 <__aeabi_fmul+0x23e>
 800078e:	2301      	movs	r3, #1
 8000790:	0862      	lsrs	r2, r4, #1
 8000792:	401c      	ands	r4, r3
 8000794:	4314      	orrs	r4, r2
 8000796:	9a01      	ldr	r2, [sp, #4]
 8000798:	327f      	adds	r2, #127	; 0x7f
 800079a:	2a00      	cmp	r2, #0
 800079c:	dd4d      	ble.n	800083a <__aeabi_fmul+0x1f6>
 800079e:	0763      	lsls	r3, r4, #29
 80007a0:	d004      	beq.n	80007ac <__aeabi_fmul+0x168>
 80007a2:	230f      	movs	r3, #15
 80007a4:	4023      	ands	r3, r4
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d000      	beq.n	80007ac <__aeabi_fmul+0x168>
 80007aa:	3404      	adds	r4, #4
 80007ac:	0123      	lsls	r3, r4, #4
 80007ae:	d503      	bpl.n	80007b8 <__aeabi_fmul+0x174>
 80007b0:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <__aeabi_fmul+0x260>)
 80007b2:	9a01      	ldr	r2, [sp, #4]
 80007b4:	401c      	ands	r4, r3
 80007b6:	3280      	adds	r2, #128	; 0x80
 80007b8:	2afe      	cmp	r2, #254	; 0xfe
 80007ba:	dcbc      	bgt.n	8000736 <__aeabi_fmul+0xf2>
 80007bc:	01a3      	lsls	r3, r4, #6
 80007be:	0a5b      	lsrs	r3, r3, #9
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	e79a      	b.n	80006fa <__aeabi_fmul+0xb6>
 80007c4:	230c      	movs	r3, #12
 80007c6:	469a      	mov	sl, r3
 80007c8:	3b09      	subs	r3, #9
 80007ca:	25ff      	movs	r5, #255	; 0xff
 80007cc:	469b      	mov	fp, r3
 80007ce:	e754      	b.n	800067a <__aeabi_fmul+0x36>
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fa6d 	bl	8000cb0 <__clzsi2>
 80007d6:	464a      	mov	r2, r9
 80007d8:	1f43      	subs	r3, r0, #5
 80007da:	2576      	movs	r5, #118	; 0x76
 80007dc:	409a      	lsls	r2, r3
 80007de:	2300      	movs	r3, #0
 80007e0:	426d      	negs	r5, r5
 80007e2:	4691      	mov	r9, r2
 80007e4:	1a2d      	subs	r5, r5, r0
 80007e6:	469a      	mov	sl, r3
 80007e8:	469b      	mov	fp, r3
 80007ea:	e746      	b.n	800067a <__aeabi_fmul+0x36>
 80007ec:	4652      	mov	r2, sl
 80007ee:	2303      	movs	r3, #3
 80007f0:	431a      	orrs	r2, r3
 80007f2:	4692      	mov	sl, r2
 80007f4:	2003      	movs	r0, #3
 80007f6:	e750      	b.n	800069a <__aeabi_fmul+0x56>
 80007f8:	0020      	movs	r0, r4
 80007fa:	f000 fa59 	bl	8000cb0 <__clzsi2>
 80007fe:	1f43      	subs	r3, r0, #5
 8000800:	1a2d      	subs	r5, r5, r0
 8000802:	409c      	lsls	r4, r3
 8000804:	3d76      	subs	r5, #118	; 0x76
 8000806:	2000      	movs	r0, #0
 8000808:	e747      	b.n	800069a <__aeabi_fmul+0x56>
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	2700      	movs	r7, #0
 800080e:	03db      	lsls	r3, r3, #15
 8000810:	22ff      	movs	r2, #255	; 0xff
 8000812:	e772      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000814:	4642      	mov	r2, r8
 8000816:	e766      	b.n	80006e6 <__aeabi_fmul+0xa2>
 8000818:	464c      	mov	r4, r9
 800081a:	0032      	movs	r2, r6
 800081c:	4658      	mov	r0, fp
 800081e:	e762      	b.n	80006e6 <__aeabi_fmul+0xa2>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	464a      	mov	r2, r9
 8000824:	03db      	lsls	r3, r3, #15
 8000826:	421a      	tst	r2, r3
 8000828:	d022      	beq.n	8000870 <__aeabi_fmul+0x22c>
 800082a:	421c      	tst	r4, r3
 800082c:	d120      	bne.n	8000870 <__aeabi_fmul+0x22c>
 800082e:	4323      	orrs	r3, r4
 8000830:	025b      	lsls	r3, r3, #9
 8000832:	0a5b      	lsrs	r3, r3, #9
 8000834:	4647      	mov	r7, r8
 8000836:	22ff      	movs	r2, #255	; 0xff
 8000838:	e75f      	b.n	80006fa <__aeabi_fmul+0xb6>
 800083a:	2301      	movs	r3, #1
 800083c:	1a9a      	subs	r2, r3, r2
 800083e:	2a1b      	cmp	r2, #27
 8000840:	dc21      	bgt.n	8000886 <__aeabi_fmul+0x242>
 8000842:	0023      	movs	r3, r4
 8000844:	9901      	ldr	r1, [sp, #4]
 8000846:	40d3      	lsrs	r3, r2
 8000848:	319e      	adds	r1, #158	; 0x9e
 800084a:	408c      	lsls	r4, r1
 800084c:	001a      	movs	r2, r3
 800084e:	0023      	movs	r3, r4
 8000850:	1e5c      	subs	r4, r3, #1
 8000852:	41a3      	sbcs	r3, r4
 8000854:	4313      	orrs	r3, r2
 8000856:	075a      	lsls	r2, r3, #29
 8000858:	d004      	beq.n	8000864 <__aeabi_fmul+0x220>
 800085a:	220f      	movs	r2, #15
 800085c:	401a      	ands	r2, r3
 800085e:	2a04      	cmp	r2, #4
 8000860:	d000      	beq.n	8000864 <__aeabi_fmul+0x220>
 8000862:	3304      	adds	r3, #4
 8000864:	015a      	lsls	r2, r3, #5
 8000866:	d411      	bmi.n	800088c <__aeabi_fmul+0x248>
 8000868:	019b      	lsls	r3, r3, #6
 800086a:	0a5b      	lsrs	r3, r3, #9
 800086c:	2200      	movs	r2, #0
 800086e:	e744      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	464a      	mov	r2, r9
 8000874:	03db      	lsls	r3, r3, #15
 8000876:	4313      	orrs	r3, r2
 8000878:	025b      	lsls	r3, r3, #9
 800087a:	0a5b      	lsrs	r3, r3, #9
 800087c:	0037      	movs	r7, r6
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	e73b      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000882:	9501      	str	r5, [sp, #4]
 8000884:	e787      	b.n	8000796 <__aeabi_fmul+0x152>
 8000886:	2200      	movs	r2, #0
 8000888:	2300      	movs	r3, #0
 800088a:	e736      	b.n	80006fa <__aeabi_fmul+0xb6>
 800088c:	2201      	movs	r2, #1
 800088e:	2300      	movs	r3, #0
 8000890:	e733      	b.n	80006fa <__aeabi_fmul+0xb6>
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	03db      	lsls	r3, r3, #15
 8000896:	4323      	orrs	r3, r4
 8000898:	025b      	lsls	r3, r3, #9
 800089a:	0a5b      	lsrs	r3, r3, #9
 800089c:	22ff      	movs	r2, #255	; 0xff
 800089e:	e72c      	b.n	80006fa <__aeabi_fmul+0xb6>
 80008a0:	08002e38 	.word	0x08002e38
 80008a4:	f7ffffff 	.word	0xf7ffffff

080008a8 <__aeabi_fsub>:
 80008a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008aa:	4647      	mov	r7, r8
 80008ac:	46ce      	mov	lr, r9
 80008ae:	0044      	lsls	r4, r0, #1
 80008b0:	0fc2      	lsrs	r2, r0, #31
 80008b2:	b580      	push	{r7, lr}
 80008b4:	0247      	lsls	r7, r0, #9
 80008b6:	0248      	lsls	r0, r1, #9
 80008b8:	0a40      	lsrs	r0, r0, #9
 80008ba:	4684      	mov	ip, r0
 80008bc:	4666      	mov	r6, ip
 80008be:	0048      	lsls	r0, r1, #1
 80008c0:	0a7f      	lsrs	r7, r7, #9
 80008c2:	0e24      	lsrs	r4, r4, #24
 80008c4:	00f6      	lsls	r6, r6, #3
 80008c6:	0025      	movs	r5, r4
 80008c8:	4690      	mov	r8, r2
 80008ca:	00fb      	lsls	r3, r7, #3
 80008cc:	0e00      	lsrs	r0, r0, #24
 80008ce:	0fc9      	lsrs	r1, r1, #31
 80008d0:	46b1      	mov	r9, r6
 80008d2:	28ff      	cmp	r0, #255	; 0xff
 80008d4:	d100      	bne.n	80008d8 <__aeabi_fsub+0x30>
 80008d6:	e085      	b.n	80009e4 <__aeabi_fsub+0x13c>
 80008d8:	2601      	movs	r6, #1
 80008da:	4071      	eors	r1, r6
 80008dc:	1a26      	subs	r6, r4, r0
 80008de:	4291      	cmp	r1, r2
 80008e0:	d057      	beq.n	8000992 <__aeabi_fsub+0xea>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	dd43      	ble.n	800096e <__aeabi_fsub+0xc6>
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d000      	beq.n	80008ec <__aeabi_fsub+0x44>
 80008ea:	e07f      	b.n	80009ec <__aeabi_fsub+0x144>
 80008ec:	4649      	mov	r1, r9
 80008ee:	2900      	cmp	r1, #0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fsub+0x4c>
 80008f2:	e0aa      	b.n	8000a4a <__aeabi_fsub+0x1a2>
 80008f4:	3e01      	subs	r6, #1
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d000      	beq.n	80008fc <__aeabi_fsub+0x54>
 80008fa:	e0f7      	b.n	8000aec <__aeabi_fsub+0x244>
 80008fc:	1a5b      	subs	r3, r3, r1
 80008fe:	015a      	lsls	r2, r3, #5
 8000900:	d400      	bmi.n	8000904 <__aeabi_fsub+0x5c>
 8000902:	e08b      	b.n	8000a1c <__aeabi_fsub+0x174>
 8000904:	019b      	lsls	r3, r3, #6
 8000906:	099c      	lsrs	r4, r3, #6
 8000908:	0020      	movs	r0, r4
 800090a:	f000 f9d1 	bl	8000cb0 <__clzsi2>
 800090e:	3805      	subs	r0, #5
 8000910:	4084      	lsls	r4, r0
 8000912:	4285      	cmp	r5, r0
 8000914:	dd00      	ble.n	8000918 <__aeabi_fsub+0x70>
 8000916:	e0d3      	b.n	8000ac0 <__aeabi_fsub+0x218>
 8000918:	1b45      	subs	r5, r0, r5
 800091a:	0023      	movs	r3, r4
 800091c:	2020      	movs	r0, #32
 800091e:	3501      	adds	r5, #1
 8000920:	40eb      	lsrs	r3, r5
 8000922:	1b45      	subs	r5, r0, r5
 8000924:	40ac      	lsls	r4, r5
 8000926:	1e62      	subs	r2, r4, #1
 8000928:	4194      	sbcs	r4, r2
 800092a:	4323      	orrs	r3, r4
 800092c:	2407      	movs	r4, #7
 800092e:	2500      	movs	r5, #0
 8000930:	401c      	ands	r4, r3
 8000932:	2201      	movs	r2, #1
 8000934:	4641      	mov	r1, r8
 8000936:	400a      	ands	r2, r1
 8000938:	2c00      	cmp	r4, #0
 800093a:	d004      	beq.n	8000946 <__aeabi_fsub+0x9e>
 800093c:	210f      	movs	r1, #15
 800093e:	4019      	ands	r1, r3
 8000940:	2904      	cmp	r1, #4
 8000942:	d000      	beq.n	8000946 <__aeabi_fsub+0x9e>
 8000944:	3304      	adds	r3, #4
 8000946:	0159      	lsls	r1, r3, #5
 8000948:	d400      	bmi.n	800094c <__aeabi_fsub+0xa4>
 800094a:	e080      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 800094c:	3501      	adds	r5, #1
 800094e:	b2ec      	uxtb	r4, r5
 8000950:	2dff      	cmp	r5, #255	; 0xff
 8000952:	d000      	beq.n	8000956 <__aeabi_fsub+0xae>
 8000954:	e0a3      	b.n	8000a9e <__aeabi_fsub+0x1f6>
 8000956:	24ff      	movs	r4, #255	; 0xff
 8000958:	2300      	movs	r3, #0
 800095a:	025b      	lsls	r3, r3, #9
 800095c:	05e4      	lsls	r4, r4, #23
 800095e:	0a58      	lsrs	r0, r3, #9
 8000960:	07d2      	lsls	r2, r2, #31
 8000962:	4320      	orrs	r0, r4
 8000964:	4310      	orrs	r0, r2
 8000966:	bc0c      	pop	{r2, r3}
 8000968:	4690      	mov	r8, r2
 800096a:	4699      	mov	r9, r3
 800096c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800096e:	2e00      	cmp	r6, #0
 8000970:	d174      	bne.n	8000a5c <__aeabi_fsub+0x1b4>
 8000972:	1c60      	adds	r0, r4, #1
 8000974:	b2c0      	uxtb	r0, r0
 8000976:	2801      	cmp	r0, #1
 8000978:	dc00      	bgt.n	800097c <__aeabi_fsub+0xd4>
 800097a:	e0a7      	b.n	8000acc <__aeabi_fsub+0x224>
 800097c:	464a      	mov	r2, r9
 800097e:	1a9c      	subs	r4, r3, r2
 8000980:	0162      	lsls	r2, r4, #5
 8000982:	d500      	bpl.n	8000986 <__aeabi_fsub+0xde>
 8000984:	e0b6      	b.n	8000af4 <__aeabi_fsub+0x24c>
 8000986:	2c00      	cmp	r4, #0
 8000988:	d1be      	bne.n	8000908 <__aeabi_fsub+0x60>
 800098a:	2200      	movs	r2, #0
 800098c:	2400      	movs	r4, #0
 800098e:	2300      	movs	r3, #0
 8000990:	e7e3      	b.n	800095a <__aeabi_fsub+0xb2>
 8000992:	2e00      	cmp	r6, #0
 8000994:	dc00      	bgt.n	8000998 <__aeabi_fsub+0xf0>
 8000996:	e085      	b.n	8000aa4 <__aeabi_fsub+0x1fc>
 8000998:	2800      	cmp	r0, #0
 800099a:	d046      	beq.n	8000a2a <__aeabi_fsub+0x182>
 800099c:	2cff      	cmp	r4, #255	; 0xff
 800099e:	d049      	beq.n	8000a34 <__aeabi_fsub+0x18c>
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	4648      	mov	r0, r9
 80009a4:	04d2      	lsls	r2, r2, #19
 80009a6:	4310      	orrs	r0, r2
 80009a8:	4681      	mov	r9, r0
 80009aa:	2201      	movs	r2, #1
 80009ac:	2e1b      	cmp	r6, #27
 80009ae:	dc09      	bgt.n	80009c4 <__aeabi_fsub+0x11c>
 80009b0:	2020      	movs	r0, #32
 80009b2:	464c      	mov	r4, r9
 80009b4:	1b80      	subs	r0, r0, r6
 80009b6:	4084      	lsls	r4, r0
 80009b8:	464a      	mov	r2, r9
 80009ba:	0020      	movs	r0, r4
 80009bc:	40f2      	lsrs	r2, r6
 80009be:	1e44      	subs	r4, r0, #1
 80009c0:	41a0      	sbcs	r0, r4
 80009c2:	4302      	orrs	r2, r0
 80009c4:	189b      	adds	r3, r3, r2
 80009c6:	015a      	lsls	r2, r3, #5
 80009c8:	d528      	bpl.n	8000a1c <__aeabi_fsub+0x174>
 80009ca:	3501      	adds	r5, #1
 80009cc:	2dff      	cmp	r5, #255	; 0xff
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fsub+0x12a>
 80009d0:	e0a8      	b.n	8000b24 <__aeabi_fsub+0x27c>
 80009d2:	2201      	movs	r2, #1
 80009d4:	2407      	movs	r4, #7
 80009d6:	4994      	ldr	r1, [pc, #592]	; (8000c28 <__aeabi_fsub+0x380>)
 80009d8:	401a      	ands	r2, r3
 80009da:	085b      	lsrs	r3, r3, #1
 80009dc:	400b      	ands	r3, r1
 80009de:	4313      	orrs	r3, r2
 80009e0:	401c      	ands	r4, r3
 80009e2:	e7a6      	b.n	8000932 <__aeabi_fsub+0x8a>
 80009e4:	2e00      	cmp	r6, #0
 80009e6:	d000      	beq.n	80009ea <__aeabi_fsub+0x142>
 80009e8:	e778      	b.n	80008dc <__aeabi_fsub+0x34>
 80009ea:	e775      	b.n	80008d8 <__aeabi_fsub+0x30>
 80009ec:	2cff      	cmp	r4, #255	; 0xff
 80009ee:	d054      	beq.n	8000a9a <__aeabi_fsub+0x1f2>
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	4649      	mov	r1, r9
 80009f4:	04d2      	lsls	r2, r2, #19
 80009f6:	4311      	orrs	r1, r2
 80009f8:	4689      	mov	r9, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	2e1b      	cmp	r6, #27
 80009fe:	dc09      	bgt.n	8000a14 <__aeabi_fsub+0x16c>
 8000a00:	2120      	movs	r1, #32
 8000a02:	4648      	mov	r0, r9
 8000a04:	1b89      	subs	r1, r1, r6
 8000a06:	4088      	lsls	r0, r1
 8000a08:	464a      	mov	r2, r9
 8000a0a:	0001      	movs	r1, r0
 8000a0c:	40f2      	lsrs	r2, r6
 8000a0e:	1e48      	subs	r0, r1, #1
 8000a10:	4181      	sbcs	r1, r0
 8000a12:	430a      	orrs	r2, r1
 8000a14:	1a9b      	subs	r3, r3, r2
 8000a16:	015a      	lsls	r2, r3, #5
 8000a18:	d500      	bpl.n	8000a1c <__aeabi_fsub+0x174>
 8000a1a:	e773      	b.n	8000904 <__aeabi_fsub+0x5c>
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4641      	mov	r1, r8
 8000a20:	400a      	ands	r2, r1
 8000a22:	0759      	lsls	r1, r3, #29
 8000a24:	d000      	beq.n	8000a28 <__aeabi_fsub+0x180>
 8000a26:	e789      	b.n	800093c <__aeabi_fsub+0x94>
 8000a28:	e011      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d158      	bne.n	8000ae2 <__aeabi_fsub+0x23a>
 8000a30:	2cff      	cmp	r4, #255	; 0xff
 8000a32:	d10c      	bne.n	8000a4e <__aeabi_fsub+0x1a6>
 8000a34:	08db      	lsrs	r3, r3, #3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x194>
 8000a3a:	e78c      	b.n	8000956 <__aeabi_fsub+0xae>
 8000a3c:	2080      	movs	r0, #128	; 0x80
 8000a3e:	03c0      	lsls	r0, r0, #15
 8000a40:	4303      	orrs	r3, r0
 8000a42:	025b      	lsls	r3, r3, #9
 8000a44:	0a5b      	lsrs	r3, r3, #9
 8000a46:	24ff      	movs	r4, #255	; 0xff
 8000a48:	e787      	b.n	800095a <__aeabi_fsub+0xb2>
 8000a4a:	2cff      	cmp	r4, #255	; 0xff
 8000a4c:	d025      	beq.n	8000a9a <__aeabi_fsub+0x1f2>
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	2dff      	cmp	r5, #255	; 0xff
 8000a52:	d0f0      	beq.n	8000a36 <__aeabi_fsub+0x18e>
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	0a5b      	lsrs	r3, r3, #9
 8000a58:	b2ec      	uxtb	r4, r5
 8000a5a:	e77e      	b.n	800095a <__aeabi_fsub+0xb2>
 8000a5c:	2c00      	cmp	r4, #0
 8000a5e:	d04d      	beq.n	8000afc <__aeabi_fsub+0x254>
 8000a60:	28ff      	cmp	r0, #255	; 0xff
 8000a62:	d018      	beq.n	8000a96 <__aeabi_fsub+0x1ee>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	04e4      	lsls	r4, r4, #19
 8000a68:	4272      	negs	r2, r6
 8000a6a:	4323      	orrs	r3, r4
 8000a6c:	2a1b      	cmp	r2, #27
 8000a6e:	dd00      	ble.n	8000a72 <__aeabi_fsub+0x1ca>
 8000a70:	e0c4      	b.n	8000bfc <__aeabi_fsub+0x354>
 8000a72:	001c      	movs	r4, r3
 8000a74:	2520      	movs	r5, #32
 8000a76:	40d4      	lsrs	r4, r2
 8000a78:	1aaa      	subs	r2, r5, r2
 8000a7a:	4093      	lsls	r3, r2
 8000a7c:	1e5a      	subs	r2, r3, #1
 8000a7e:	4193      	sbcs	r3, r2
 8000a80:	4323      	orrs	r3, r4
 8000a82:	464a      	mov	r2, r9
 8000a84:	0005      	movs	r5, r0
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	4688      	mov	r8, r1
 8000a8a:	e738      	b.n	80008fe <__aeabi_fsub+0x56>
 8000a8c:	1c72      	adds	r2, r6, #1
 8000a8e:	d0f8      	beq.n	8000a82 <__aeabi_fsub+0x1da>
 8000a90:	43f2      	mvns	r2, r6
 8000a92:	28ff      	cmp	r0, #255	; 0xff
 8000a94:	d1ea      	bne.n	8000a6c <__aeabi_fsub+0x1c4>
 8000a96:	000a      	movs	r2, r1
 8000a98:	464b      	mov	r3, r9
 8000a9a:	25ff      	movs	r5, #255	; 0xff
 8000a9c:	e7d7      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000a9e:	019b      	lsls	r3, r3, #6
 8000aa0:	0a5b      	lsrs	r3, r3, #9
 8000aa2:	e75a      	b.n	800095a <__aeabi_fsub+0xb2>
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d141      	bne.n	8000b2c <__aeabi_fsub+0x284>
 8000aa8:	1c65      	adds	r5, r4, #1
 8000aaa:	b2e9      	uxtb	r1, r5
 8000aac:	2901      	cmp	r1, #1
 8000aae:	dd45      	ble.n	8000b3c <__aeabi_fsub+0x294>
 8000ab0:	2dff      	cmp	r5, #255	; 0xff
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_fsub+0x20e>
 8000ab4:	e74f      	b.n	8000956 <__aeabi_fsub+0xae>
 8000ab6:	2407      	movs	r4, #7
 8000ab8:	444b      	add	r3, r9
 8000aba:	085b      	lsrs	r3, r3, #1
 8000abc:	401c      	ands	r4, r3
 8000abe:	e738      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	4b5a      	ldr	r3, [pc, #360]	; (8000c2c <__aeabi_fsub+0x384>)
 8000ac4:	1a2d      	subs	r5, r5, r0
 8000ac6:	4023      	ands	r3, r4
 8000ac8:	4014      	ands	r4, r2
 8000aca:	e732      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000acc:	2c00      	cmp	r4, #0
 8000ace:	d11d      	bne.n	8000b0c <__aeabi_fsub+0x264>
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d17a      	bne.n	8000bca <__aeabi_fsub+0x322>
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fsub+0x234>
 8000ada:	e091      	b.n	8000c00 <__aeabi_fsub+0x358>
 8000adc:	000a      	movs	r2, r1
 8000ade:	2500      	movs	r5, #0
 8000ae0:	e7b5      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000ae2:	3e01      	subs	r6, #1
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d119      	bne.n	8000b1c <__aeabi_fsub+0x274>
 8000ae8:	444b      	add	r3, r9
 8000aea:	e76c      	b.n	80009c6 <__aeabi_fsub+0x11e>
 8000aec:	2cff      	cmp	r4, #255	; 0xff
 8000aee:	d184      	bne.n	80009fa <__aeabi_fsub+0x152>
 8000af0:	25ff      	movs	r5, #255	; 0xff
 8000af2:	e7ac      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000af4:	464a      	mov	r2, r9
 8000af6:	4688      	mov	r8, r1
 8000af8:	1ad4      	subs	r4, r2, r3
 8000afa:	e705      	b.n	8000908 <__aeabi_fsub+0x60>
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1c5      	bne.n	8000a8c <__aeabi_fsub+0x1e4>
 8000b00:	000a      	movs	r2, r1
 8000b02:	28ff      	cmp	r0, #255	; 0xff
 8000b04:	d0c8      	beq.n	8000a98 <__aeabi_fsub+0x1f0>
 8000b06:	0005      	movs	r5, r0
 8000b08:	464b      	mov	r3, r9
 8000b0a:	e7a0      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d149      	bne.n	8000ba4 <__aeabi_fsub+0x2fc>
 8000b10:	464b      	mov	r3, r9
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d077      	beq.n	8000c06 <__aeabi_fsub+0x35e>
 8000b16:	000a      	movs	r2, r1
 8000b18:	25ff      	movs	r5, #255	; 0xff
 8000b1a:	e798      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000b1c:	2cff      	cmp	r4, #255	; 0xff
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_fsub+0x27a>
 8000b20:	e743      	b.n	80009aa <__aeabi_fsub+0x102>
 8000b22:	e787      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b24:	000a      	movs	r2, r1
 8000b26:	24ff      	movs	r4, #255	; 0xff
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e716      	b.n	800095a <__aeabi_fsub+0xb2>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d115      	bne.n	8000b5c <__aeabi_fsub+0x2b4>
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d157      	bne.n	8000be4 <__aeabi_fsub+0x33c>
 8000b34:	28ff      	cmp	r0, #255	; 0xff
 8000b36:	d1e6      	bne.n	8000b06 <__aeabi_fsub+0x25e>
 8000b38:	464b      	mov	r3, r9
 8000b3a:	e77b      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d120      	bne.n	8000b82 <__aeabi_fsub+0x2da>
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d057      	beq.n	8000bf4 <__aeabi_fsub+0x34c>
 8000b44:	4649      	mov	r1, r9
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d053      	beq.n	8000bf2 <__aeabi_fsub+0x34a>
 8000b4a:	444b      	add	r3, r9
 8000b4c:	015a      	lsls	r2, r3, #5
 8000b4e:	d568      	bpl.n	8000c22 <__aeabi_fsub+0x37a>
 8000b50:	2407      	movs	r4, #7
 8000b52:	4a36      	ldr	r2, [pc, #216]	; (8000c2c <__aeabi_fsub+0x384>)
 8000b54:	401c      	ands	r4, r3
 8000b56:	2501      	movs	r5, #1
 8000b58:	4013      	ands	r3, r2
 8000b5a:	e6ea      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000b5c:	28ff      	cmp	r0, #255	; 0xff
 8000b5e:	d0eb      	beq.n	8000b38 <__aeabi_fsub+0x290>
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	04d2      	lsls	r2, r2, #19
 8000b64:	4276      	negs	r6, r6
 8000b66:	4313      	orrs	r3, r2
 8000b68:	2e1b      	cmp	r6, #27
 8000b6a:	dc53      	bgt.n	8000c14 <__aeabi_fsub+0x36c>
 8000b6c:	2520      	movs	r5, #32
 8000b6e:	1bad      	subs	r5, r5, r6
 8000b70:	001a      	movs	r2, r3
 8000b72:	40ab      	lsls	r3, r5
 8000b74:	40f2      	lsrs	r2, r6
 8000b76:	1e5c      	subs	r4, r3, #1
 8000b78:	41a3      	sbcs	r3, r4
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	444b      	add	r3, r9
 8000b7e:	0005      	movs	r5, r0
 8000b80:	e721      	b.n	80009c6 <__aeabi_fsub+0x11e>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0d8      	beq.n	8000b38 <__aeabi_fsub+0x290>
 8000b86:	4649      	mov	r1, r9
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0x2e6>
 8000b8c:	e752      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	03c9      	lsls	r1, r1, #15
 8000b92:	420f      	tst	r7, r1
 8000b94:	d100      	bne.n	8000b98 <__aeabi_fsub+0x2f0>
 8000b96:	e74d      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000b98:	4660      	mov	r0, ip
 8000b9a:	4208      	tst	r0, r1
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_fsub+0x2f8>
 8000b9e:	e749      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000ba0:	464b      	mov	r3, r9
 8000ba2:	e747      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000ba4:	4648      	mov	r0, r9
 8000ba6:	25ff      	movs	r5, #255	; 0xff
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x306>
 8000bac:	e74f      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	03d2      	lsls	r2, r2, #15
 8000bb2:	4217      	tst	r7, r2
 8000bb4:	d004      	beq.n	8000bc0 <__aeabi_fsub+0x318>
 8000bb6:	4660      	mov	r0, ip
 8000bb8:	4210      	tst	r0, r2
 8000bba:	d101      	bne.n	8000bc0 <__aeabi_fsub+0x318>
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	4688      	mov	r8, r1
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4641      	mov	r1, r8
 8000bc4:	25ff      	movs	r5, #255	; 0xff
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	e741      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000bca:	4648      	mov	r0, r9
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d01f      	beq.n	8000c10 <__aeabi_fsub+0x368>
 8000bd0:	1a1a      	subs	r2, r3, r0
 8000bd2:	0150      	lsls	r0, r2, #5
 8000bd4:	d520      	bpl.n	8000c18 <__aeabi_fsub+0x370>
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	2407      	movs	r4, #7
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	401c      	ands	r4, r3
 8000bde:	4688      	mov	r8, r1
 8000be0:	2500      	movs	r5, #0
 8000be2:	e6a6      	b.n	8000932 <__aeabi_fsub+0x8a>
 8000be4:	1c74      	adds	r4, r6, #1
 8000be6:	d0c9      	beq.n	8000b7c <__aeabi_fsub+0x2d4>
 8000be8:	43f6      	mvns	r6, r6
 8000bea:	28ff      	cmp	r0, #255	; 0xff
 8000bec:	d1bc      	bne.n	8000b68 <__aeabi_fsub+0x2c0>
 8000bee:	464b      	mov	r3, r9
 8000bf0:	e720      	b.n	8000a34 <__aeabi_fsub+0x18c>
 8000bf2:	4699      	mov	r9, r3
 8000bf4:	464b      	mov	r3, r9
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	e72b      	b.n	8000a54 <__aeabi_fsub+0x1ac>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e740      	b.n	8000a82 <__aeabi_fsub+0x1da>
 8000c00:	2200      	movs	r2, #0
 8000c02:	2300      	movs	r3, #0
 8000c04:	e6a9      	b.n	800095a <__aeabi_fsub+0xb2>
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	2200      	movs	r2, #0
 8000c0a:	03db      	lsls	r3, r3, #15
 8000c0c:	24ff      	movs	r4, #255	; 0xff
 8000c0e:	e6a4      	b.n	800095a <__aeabi_fsub+0xb2>
 8000c10:	2500      	movs	r5, #0
 8000c12:	e71c      	b.n	8000a4e <__aeabi_fsub+0x1a6>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e7b1      	b.n	8000b7c <__aeabi_fsub+0x2d4>
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d0f1      	beq.n	8000c00 <__aeabi_fsub+0x358>
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	2500      	movs	r5, #0
 8000c20:	e6fc      	b.n	8000a1c <__aeabi_fsub+0x174>
 8000c22:	2500      	movs	r5, #0
 8000c24:	e6fa      	b.n	8000a1c <__aeabi_fsub+0x174>
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	7dffffff 	.word	0x7dffffff
 8000c2c:	fbffffff 	.word	0xfbffffff

08000c30 <__aeabi_ui2f>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	1e04      	subs	r4, r0, #0
 8000c34:	d034      	beq.n	8000ca0 <__aeabi_ui2f+0x70>
 8000c36:	f000 f83b 	bl	8000cb0 <__clzsi2>
 8000c3a:	229e      	movs	r2, #158	; 0x9e
 8000c3c:	1a12      	subs	r2, r2, r0
 8000c3e:	2a96      	cmp	r2, #150	; 0x96
 8000c40:	dc07      	bgt.n	8000c52 <__aeabi_ui2f+0x22>
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	2808      	cmp	r0, #8
 8000c46:	dd2e      	ble.n	8000ca6 <__aeabi_ui2f+0x76>
 8000c48:	3808      	subs	r0, #8
 8000c4a:	4084      	lsls	r4, r0
 8000c4c:	0260      	lsls	r0, r4, #9
 8000c4e:	0a40      	lsrs	r0, r0, #9
 8000c50:	e021      	b.n	8000c96 <__aeabi_ui2f+0x66>
 8000c52:	2a99      	cmp	r2, #153	; 0x99
 8000c54:	dd09      	ble.n	8000c6a <__aeabi_ui2f+0x3a>
 8000c56:	0003      	movs	r3, r0
 8000c58:	0021      	movs	r1, r4
 8000c5a:	331b      	adds	r3, #27
 8000c5c:	4099      	lsls	r1, r3
 8000c5e:	1e4b      	subs	r3, r1, #1
 8000c60:	4199      	sbcs	r1, r3
 8000c62:	2305      	movs	r3, #5
 8000c64:	1a1b      	subs	r3, r3, r0
 8000c66:	40dc      	lsrs	r4, r3
 8000c68:	430c      	orrs	r4, r1
 8000c6a:	2805      	cmp	r0, #5
 8000c6c:	dd01      	ble.n	8000c72 <__aeabi_ui2f+0x42>
 8000c6e:	1f43      	subs	r3, r0, #5
 8000c70:	409c      	lsls	r4, r3
 8000c72:	0023      	movs	r3, r4
 8000c74:	490d      	ldr	r1, [pc, #52]	; (8000cac <__aeabi_ui2f+0x7c>)
 8000c76:	400b      	ands	r3, r1
 8000c78:	0765      	lsls	r5, r4, #29
 8000c7a:	d009      	beq.n	8000c90 <__aeabi_ui2f+0x60>
 8000c7c:	250f      	movs	r5, #15
 8000c7e:	402c      	ands	r4, r5
 8000c80:	2c04      	cmp	r4, #4
 8000c82:	d005      	beq.n	8000c90 <__aeabi_ui2f+0x60>
 8000c84:	3304      	adds	r3, #4
 8000c86:	015c      	lsls	r4, r3, #5
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_ui2f+0x60>
 8000c8a:	229f      	movs	r2, #159	; 0x9f
 8000c8c:	400b      	ands	r3, r1
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	019b      	lsls	r3, r3, #6
 8000c92:	0a58      	lsrs	r0, r3, #9
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	0240      	lsls	r0, r0, #9
 8000c98:	05d2      	lsls	r2, r2, #23
 8000c9a:	0a40      	lsrs	r0, r0, #9
 8000c9c:	4310      	orrs	r0, r2
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	e7f7      	b.n	8000c96 <__aeabi_ui2f+0x66>
 8000ca6:	0260      	lsls	r0, r4, #9
 8000ca8:	0a40      	lsrs	r0, r0, #9
 8000caa:	e7f4      	b.n	8000c96 <__aeabi_ui2f+0x66>
 8000cac:	fbffffff 	.word	0xfbffffff

08000cb0 <__clzsi2>:
 8000cb0:	211c      	movs	r1, #28
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	041b      	lsls	r3, r3, #16
 8000cb6:	4298      	cmp	r0, r3
 8000cb8:	d301      	bcc.n	8000cbe <__clzsi2+0xe>
 8000cba:	0c00      	lsrs	r0, r0, #16
 8000cbc:	3910      	subs	r1, #16
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	d301      	bcc.n	8000cc8 <__clzsi2+0x18>
 8000cc4:	0a00      	lsrs	r0, r0, #8
 8000cc6:	3908      	subs	r1, #8
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	4298      	cmp	r0, r3
 8000ccc:	d301      	bcc.n	8000cd2 <__clzsi2+0x22>
 8000cce:	0900      	lsrs	r0, r0, #4
 8000cd0:	3904      	subs	r1, #4
 8000cd2:	a202      	add	r2, pc, #8	; (adr r2, 8000cdc <__clzsi2+0x2c>)
 8000cd4:	5c10      	ldrb	r0, [r2, r0]
 8000cd6:	1840      	adds	r0, r0, r1
 8000cd8:	4770      	bx	lr
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	02020304 	.word	0x02020304
 8000ce0:	01010101 	.word	0x01010101
	...

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cee:	b08d      	sub	sp, #52	; 0x34
 8000cf0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f000 fabd 	bl	8001270 <HAL_Init>

  /* USER CODE BEGIN Init */

  //uint8_t initByte = 0xbe;
  uint8_t Byte1 = 0x71;
 8000cf6:	251f      	movs	r5, #31
 8000cf8:	197b      	adds	r3, r7, r5
 8000cfa:	2271      	movs	r2, #113	; 0x71
 8000cfc:	701a      	strb	r2, [r3, #0]
  uint8_t Byte2;
  uint8_t initBuffer[3];
  initBuffer[0] = 0xbe;
 8000cfe:	2418      	movs	r4, #24
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	22be      	movs	r2, #190	; 0xbe
 8000d04:	701a      	strb	r2, [r3, #0]
  initBuffer[1] = 0x08;
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	2208      	movs	r2, #8
 8000d0a:	705a      	strb	r2, [r3, #1]
  initBuffer[2] = 0x00;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	709a      	strb	r2, [r3, #2]
  uint8_t ansByte[7];
  uint32_t rawTemp;


//Temperature/Humidity sensor init
  HAL_Delay(50);
 8000d12:	2032      	movs	r0, #50	; 0x32
 8000d14:	f000 fb10 	bl	8001338 <HAL_Delay>
  /**HAL_I2C_Master_Receive(&hi2c1, 0x38<<1, ansByte, sizeof(ansByte), 50);
  //HAL_I2C_Master_Transmit(&hi2c1, 0x38<<1, &initByte, sizeof(initByte), 50);
  HAL_I2C_Master_Transmit(&hi2c1, 0x38<<1, initBuffer, sizeof(initBuffer), 50);
  HAL_I2C_Master_Receive(&hi2c1, 0x38<<1, ansByte, sizeof(ansByte), 50);**/

  HAL_I2C_Master_Transmit(&hi2c1, 0x38<<1, &Byte1, sizeof(Byte1), 50);
 8000d18:	197a      	adds	r2, r7, r5
 8000d1a:	4851      	ldr	r0, [pc, #324]	; (8000e60 <main+0x174>)
 8000d1c:	2332      	movs	r3, #50	; 0x32
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	2170      	movs	r1, #112	; 0x70
 8000d24:	f000 fe48 	bl	80019b8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, 0x38<<1, &Byte2, sizeof(Byte2), 50);
 8000d28:	261e      	movs	r6, #30
 8000d2a:	19ba      	adds	r2, r7, r6
 8000d2c:	484c      	ldr	r0, [pc, #304]	; (8000e60 <main+0x174>)
 8000d2e:	2332      	movs	r3, #50	; 0x32
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2301      	movs	r3, #1
 8000d34:	2170      	movs	r1, #112	; 0x70
 8000d36:	f000 ff47 	bl	8001bc8 <HAL_I2C_Master_Receive>

  HAL_I2C_Master_Transmit(&hi2c1, 0x38<<1, initBuffer, sizeof(initBuffer), 50);
 8000d3a:	193a      	adds	r2, r7, r4
 8000d3c:	4848      	ldr	r0, [pc, #288]	; (8000e60 <main+0x174>)
 8000d3e:	2332      	movs	r3, #50	; 0x32
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2303      	movs	r3, #3
 8000d44:	2170      	movs	r1, #112	; 0x70
 8000d46:	f000 fe37 	bl	80019b8 <HAL_I2C_Master_Transmit>

  HAL_I2C_Master_Transmit(&hi2c1, 0x38<<1, &Byte1, sizeof(Byte1), 50);
 8000d4a:	197a      	adds	r2, r7, r5
 8000d4c:	4844      	ldr	r0, [pc, #272]	; (8000e60 <main+0x174>)
 8000d4e:	2332      	movs	r3, #50	; 0x32
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2301      	movs	r3, #1
 8000d54:	2170      	movs	r1, #112	; 0x70
 8000d56:	f000 fe2f 	bl	80019b8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x38<<1, &Byte2, sizeof(Byte2), 50);
 8000d5a:	19ba      	adds	r2, r7, r6
 8000d5c:	4840      	ldr	r0, [pc, #256]	; (8000e60 <main+0x174>)
 8000d5e:	2332      	movs	r3, #50	; 0x32
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2301      	movs	r3, #1
 8000d64:	2170      	movs	r1, #112	; 0x70
 8000d66:	f000 ff2f 	bl	8001bc8 <HAL_I2C_Master_Receive>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6a:	f000 f885 	bl	8000e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6e:	f000 f925 	bl	8000fbc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d72:	f000 f8e3 	bl	8000f3c <MX_I2C1_Init>

	  //Sensor communication
	  //HAL_I2C_Master_Transmit(hi2c, DevAddress, pData, Size, Timeout);

	  //trigger measurement
	  uint8_t triggerByte = 0xAC;
 8000d76:	2027      	movs	r0, #39	; 0x27
 8000d78:	183b      	adds	r3, r7, r0
 8000d7a:	22ac      	movs	r2, #172	; 0xac
 8000d7c:	701a      	strb	r2, [r3, #0]
	  uint8_t param1 = 0x33;
 8000d7e:	2426      	movs	r4, #38	; 0x26
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	2233      	movs	r2, #51	; 0x33
 8000d84:	701a      	strb	r2, [r3, #0]
	  uint8_t param2 = 0x00;
 8000d86:	2525      	movs	r5, #37	; 0x25
 8000d88:	197b      	adds	r3, r7, r5
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	  unsigned char triggerBuffer[3];
	  triggerBuffer[0] = triggerByte;
 8000d8e:	210c      	movs	r1, #12
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	183a      	adds	r2, r7, r0
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	701a      	strb	r2, [r3, #0]
	  triggerBuffer[1] = param1;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	193a      	adds	r2, r7, r4
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	705a      	strb	r2, [r3, #1]
	  triggerBuffer[2] = param2;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	197a      	adds	r2, r7, r5
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	709a      	strb	r2, [r3, #2]
	  HAL_I2C_Master_Transmit(&hi2c1, 0x38<<1, triggerBuffer, sizeof(triggerBuffer), 100);
 8000da8:	187a      	adds	r2, r7, r1
 8000daa:	482d      	ldr	r0, [pc, #180]	; (8000e60 <main+0x174>)
 8000dac:	2364      	movs	r3, #100	; 0x64
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2303      	movs	r3, #3
 8000db2:	2170      	movs	r1, #112	; 0x70
 8000db4:	f000 fe00 	bl	80019b8 <HAL_I2C_Master_Transmit>

	  //Wait for measurement
	  HAL_Delay(100);
 8000db8:	2064      	movs	r0, #100	; 0x64
 8000dba:	f000 fabd 	bl	8001338 <HAL_Delay>

	  //Receive measurement data
	  uint8_t readBuffer[7];
	  HAL_I2C_Master_Receive(&hi2c1, 0x38<<1, readBuffer, sizeof(readBuffer), 100); //Muss ich das mehrfach aufrufen?
 8000dbe:	1d3a      	adds	r2, r7, #4
 8000dc0:	4827      	ldr	r0, [pc, #156]	; (8000e60 <main+0x174>)
 8000dc2:	2364      	movs	r3, #100	; 0x64
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	2170      	movs	r1, #112	; 0x70
 8000dca:	f000 fefd 	bl	8001bc8 <HAL_I2C_Master_Receive>
	  rawTemp = (readBuffer[3]&0x0F)<<16 | readBuffer[4]<<8 | readBuffer[5];
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	78db      	ldrb	r3, [r3, #3]
 8000dd2:	041a      	lsls	r2, r3, #16
 8000dd4:	23f0      	movs	r3, #240	; 0xf0
 8000dd6:	031b      	lsls	r3, r3, #12
 8000dd8:	401a      	ands	r2, r3
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	791b      	ldrb	r3, [r3, #4]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	4313      	orrs	r3, r2
 8000de2:	1d3a      	adds	r2, r7, #4
 8000de4:	7952      	ldrb	r2, [r2, #5]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	623b      	str	r3, [r7, #32]

	  //Calculate temperature in °C
	  currentTemperature = ((float)rawTemp/1048576) * 200 - 50;
 8000dea:	6a38      	ldr	r0, [r7, #32]
 8000dec:	f7ff ff20 	bl	8000c30 <__aeabi_ui2f>
 8000df0:	1c03      	adds	r3, r0, #0
 8000df2:	2193      	movs	r1, #147	; 0x93
 8000df4:	05c9      	lsls	r1, r1, #23
 8000df6:	1c18      	adds	r0, r3, #0
 8000df8:	f7ff fa4c 	bl	8000294 <__aeabi_fdiv>
 8000dfc:	1c03      	adds	r3, r0, #0
 8000dfe:	4919      	ldr	r1, [pc, #100]	; (8000e64 <main+0x178>)
 8000e00:	1c18      	adds	r0, r3, #0
 8000e02:	f7ff fc1f 	bl	8000644 <__aeabi_fmul>
 8000e06:	1c03      	adds	r3, r0, #0
 8000e08:	4917      	ldr	r1, [pc, #92]	; (8000e68 <main+0x17c>)
 8000e0a:	1c18      	adds	r0, r3, #0
 8000e0c:	f7ff fd4c 	bl	80008a8 <__aeabi_fsub>
 8000e10:	1c03      	adds	r3, r0, #0
 8000e12:	1c1a      	adds	r2, r3, #0
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <main+0x180>)
 8000e16:	601a      	str	r2, [r3, #0]

	  //check temperature
	  if (currentTemperature < threshold) //wenn gemessene Temperatur unter Schwellwert, LED blinken lassen
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <main+0x180>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <main+0x184>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1c19      	adds	r1, r3, #0
 8000e22:	1c10      	adds	r0, r2, #0
 8000e24:	f7ff fa0e 	bl	8000244 <__aeabi_fcmplt>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d017      	beq.n	8000e5c <main+0x170>
	  		{
	  			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); //Blaue LED an
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4810      	ldr	r0, [pc, #64]	; (8000e74 <main+0x188>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	0019      	movs	r1, r3
 8000e36:	f000 fcef 	bl	8001818 <HAL_GPIO_WritePin>
	  			HAL_Delay(500);
 8000e3a:	23fa      	movs	r3, #250	; 0xfa
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 fa7a 	bl	8001338 <HAL_Delay>
	  			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET); //Blaue LED aus
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	480a      	ldr	r0, [pc, #40]	; (8000e74 <main+0x188>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	f000 fce3 	bl	8001818 <HAL_GPIO_WritePin>
	  			HAL_Delay(500);
 8000e52:	23fa      	movs	r3, #250	; 0xfa
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 fa6e 	bl	8001338 <HAL_Delay>
  {
 8000e5c:	e78b      	b.n	8000d76 <main+0x8a>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	2000002c 	.word	0x2000002c
 8000e64:	43480000 	.word	0x43480000
 8000e68:	42480000 	.word	0x42480000
 8000e6c:	20000080 	.word	0x20000080
 8000e70:	20000028 	.word	0x20000028
 8000e74:	48000800 	.word	0x48000800

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b097      	sub	sp, #92	; 0x5c
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	2428      	movs	r4, #40	; 0x28
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	0018      	movs	r0, r3
 8000e84:	2330      	movs	r3, #48	; 0x30
 8000e86:	001a      	movs	r2, r3
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f001 ff71 	bl	8002d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8e:	2318      	movs	r3, #24
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	0018      	movs	r0, r3
 8000e94:	2310      	movs	r3, #16
 8000e96:	001a      	movs	r2, r3
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f001 ff69 	bl	8002d70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	2314      	movs	r3, #20
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	f001 ff62 	bl	8002d70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eac:	0021      	movs	r1, r4
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2210      	movs	r2, #16
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	22a0      	movs	r2, #160	; 0xa0
 8000ed0:	0392      	lsls	r2, r2, #14
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	0018      	movs	r0, r3
 8000ede:	f001 f9f7 	bl	80022d0 <HAL_RCC_OscConfig>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ee6:	f000 f8ff 	bl	80010e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	2118      	movs	r1, #24
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2207      	movs	r2, #7
 8000ef0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2101      	movs	r1, #1
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f001 fcfd 	bl	8002908 <HAL_RCC_ClockConfig>
 8000f0e:	1e03      	subs	r3, r0, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f12:	f000 f8e9 	bl	80010e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2220      	movs	r2, #32
 8000f1a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	0018      	movs	r0, r3
 8000f26:	f001 fe21 	bl	8002b6c <HAL_RCCEx_PeriphCLKConfig>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f2e:	f000 f8db 	bl	80010e8 <Error_Handler>
  }
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b017      	add	sp, #92	; 0x5c
 8000f38:	bd90      	pop	{r4, r7, pc}
	...

08000f3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <MX_I2C1_Init+0x78>)
 8000f44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <MX_I2C1_Init+0x7c>)
 8000f4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f000 fc87 	bl	800188c <HAL_I2C_Init>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f82:	f000 f8b1 	bl	80010e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f001 f908 	bl	80021a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f90:	1e03      	subs	r3, r0, #0
 8000f92:	d001      	beq.n	8000f98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f94:	f000 f8a8 	bl	80010e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f001 f94b 	bl	8002238 <HAL_I2CEx_ConfigDigitalFilter>
 8000fa2:	1e03      	subs	r3, r0, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fa6:	f000 f89f 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000002c 	.word	0x2000002c
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	2000090e 	.word	0x2000090e

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	240c      	movs	r4, #12
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	2314      	movs	r3, #20
 8000fca:	001a      	movs	r2, r3
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f001 fecf 	bl	8002d70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <MX_GPIO_Init+0xfc>)
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <MX_GPIO_Init+0xfc>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	0309      	lsls	r1, r1, #12
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <MX_GPIO_Init+0xfc>)
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	031b      	lsls	r3, r3, #12
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <MX_GPIO_Init+0xfc>)
 8000ff0:	695a      	ldr	r2, [r3, #20]
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <MX_GPIO_Init+0xfc>)
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	0289      	lsls	r1, r1, #10
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <MX_GPIO_Init+0xfc>)
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	029b      	lsls	r3, r3, #10
 8001004:	4013      	ands	r3, r2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <MX_GPIO_Init+0xfc>)
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <MX_GPIO_Init+0xfc>)
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	02c9      	lsls	r1, r1, #11
 8001014:	430a      	orrs	r2, r1
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_GPIO_Init+0xfc>)
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	02db      	lsls	r3, r3, #11
 8001020:	4013      	ands	r3, r2
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001026:	23c0      	movs	r3, #192	; 0xc0
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4824      	ldr	r0, [pc, #144]	; (80010bc <MX_GPIO_Init+0x100>)
 800102c:	2200      	movs	r2, #0
 800102e:	0019      	movs	r1, r3
 8001030:	f000 fbf2 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EinInput_Pin */
  GPIO_InitStruct.Pin = EinInput_Pin;
 8001034:	193b      	adds	r3, r7, r4
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	0212      	lsls	r2, r2, #8
 800103a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	193b      	adds	r3, r7, r4
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EinInput_GPIO_Port, &GPIO_InitStruct);
 8001048:	193b      	adds	r3, r7, r4
 800104a:	4a1c      	ldr	r2, [pc, #112]	; (80010bc <MX_GPIO_Init+0x100>)
 800104c:	0019      	movs	r1, r3
 800104e:	0010      	movs	r0, r2
 8001050:	f000 fa72 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001054:	0021      	movs	r1, r4
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <MX_GPIO_Init+0x104>)
 8001060:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2202      	movs	r2, #2
 8001066:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001068:	000c      	movs	r4, r1
 800106a:	187a      	adds	r2, r7, r1
 800106c:	2390      	movs	r3, #144	; 0x90
 800106e:	05db      	lsls	r3, r3, #23
 8001070:	0011      	movs	r1, r2
 8001072:	0018      	movs	r0, r3
 8001074:	f000 fa60 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001078:	0021      	movs	r1, r4
 800107a:	187b      	adds	r3, r7, r1
 800107c:	22c0      	movs	r2, #192	; 0xc0
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2201      	movs	r2, #1
 8001086:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001094:	187b      	adds	r3, r7, r1
 8001096:	4a09      	ldr	r2, [pc, #36]	; (80010bc <MX_GPIO_Init+0x100>)
 8001098:	0019      	movs	r1, r3
 800109a:	0010      	movs	r0, r2
 800109c:	f000 fa4c 	bl	8001538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	2005      	movs	r0, #5
 80010a6:	f000 fa15 	bl	80014d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80010aa:	2005      	movs	r0, #5
 80010ac:	f000 fa27 	bl	80014fe <HAL_NVIC_EnableIRQ>

}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b009      	add	sp, #36	; 0x24
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000800 	.word	0x48000800
 80010c0:	10210000 	.word	0x10210000

080010c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	0002      	movs	r2, r0
 80010cc:	1dbb      	adds	r3, r7, #6
 80010ce:	801a      	strh	r2, [r3, #0]
	// Interrupt: wenn blauer User-Knopf gedrückt wird, aktuelle Temperatur als Schwellwert setzen
	threshold = currentTemperature ; //Schwellwert setzen
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x20>)
 80010d6:	601a      	str	r2, [r3, #0]
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000080 	.word	0x20000080
 80010e4:	20000028 	.word	0x20000028

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ee:	e7fe      	b.n	80010ee <Error_Handler+0x6>

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_MspInit+0x44>)
 80010f8:	699a      	ldr	r2, [r3, #24]
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_MspInit+0x44>)
 80010fc:	2101      	movs	r1, #1
 80010fe:	430a      	orrs	r2, r1
 8001100:	619a      	str	r2, [r3, #24]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_MspInit+0x44>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	2201      	movs	r2, #1
 8001108:	4013      	ands	r3, r2
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_MspInit+0x44>)
 8001110:	69da      	ldr	r2, [r3, #28]
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_MspInit+0x44>)
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	0549      	lsls	r1, r1, #21
 8001118:	430a      	orrs	r2, r1
 800111a:	61da      	str	r2, [r3, #28]
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_MspInit+0x44>)
 800111e:	69da      	ldr	r2, [r3, #28]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	055b      	lsls	r3, r3, #21
 8001124:	4013      	ands	r3, r2
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	40021000 	.word	0x40021000

08001138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	2314      	movs	r3, #20
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	0018      	movs	r0, r3
 8001146:	2314      	movs	r3, #20
 8001148:	001a      	movs	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	f001 fe10 	bl	8002d70 <memset>
  if(hi2c->Instance==I2C1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <HAL_I2C_MspInit+0x90>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d131      	bne.n	80011be <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_I2C_MspInit+0x94>)
 800115c:	695a      	ldr	r2, [r3, #20]
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_I2C_MspInit+0x94>)
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	02c9      	lsls	r1, r1, #11
 8001164:	430a      	orrs	r2, r1
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_I2C_MspInit+0x94>)
 800116a:	695a      	ldr	r2, [r3, #20]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	02db      	lsls	r3, r3, #11
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001176:	2114      	movs	r1, #20
 8001178:	187b      	adds	r3, r7, r1
 800117a:	22c0      	movs	r2, #192	; 0xc0
 800117c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2212      	movs	r2, #18
 8001182:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2201      	movs	r2, #1
 8001188:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2203      	movs	r2, #3
 800118e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2201      	movs	r2, #1
 8001194:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	187b      	adds	r3, r7, r1
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_I2C_MspInit+0x98>)
 800119a:	0019      	movs	r1, r3
 800119c:	0010      	movs	r0, r2
 800119e:	f000 f9cb 	bl	8001538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_I2C_MspInit+0x94>)
 80011a4:	69da      	ldr	r2, [r3, #28]
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_I2C_MspInit+0x94>)
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	0389      	lsls	r1, r1, #14
 80011ac:	430a      	orrs	r2, r1
 80011ae:	61da      	str	r2, [r3, #28]
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_I2C_MspInit+0x94>)
 80011b2:	69da      	ldr	r2, [r3, #28]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	039b      	lsls	r3, r3, #14
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b00a      	add	sp, #40	; 0x28
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	40005400 	.word	0x40005400
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000400 	.word	0x48000400

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler+0x4>

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 f882 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001206:	2001      	movs	r0, #1
 8001208:	f000 fb24 	bl	8001854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800121e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <LoopForever+0x6>)
  ldr r1, =_edata
 8001222:	490e      	ldr	r1, [pc, #56]	; (800125c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <LoopForever+0xe>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001238:	4c0b      	ldr	r4, [pc, #44]	; (8001268 <LoopForever+0x16>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001246:	f7ff ffe4 	bl	8001212 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800124a:	f001 fd6d 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124e:	f7ff fd4d 	bl	8000cec <main>

08001252 <LoopForever>:

LoopForever:
    b LoopForever
 8001252:	e7fe      	b.n	8001252 <LoopForever>
  ldr   r0, =_estack
 8001254:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001260:	08002e90 	.word	0x08002e90
  ldr r2, =_sbss
 8001264:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001268:	20000088 	.word	0x20000088

0800126c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC1_COMP_IRQHandler>
	...

08001270 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <HAL_Init+0x24>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_Init+0x24>)
 800127a:	2110      	movs	r1, #16
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f809 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001286:	f7ff ff33 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	40022000 	.word	0x40022000

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_InitTick+0x5c>)
 80012a2:	681c      	ldr	r4, [r3, #0]
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_InitTick+0x60>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	0019      	movs	r1, r3
 80012aa:	23fa      	movs	r3, #250	; 0xfa
 80012ac:	0098      	lsls	r0, r3, #2
 80012ae:	f7fe ff2b 	bl	8000108 <__udivsi3>
 80012b2:	0003      	movs	r3, r0
 80012b4:	0019      	movs	r1, r3
 80012b6:	0020      	movs	r0, r4
 80012b8:	f7fe ff26 	bl	8000108 <__udivsi3>
 80012bc:	0003      	movs	r3, r0
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 f92d 	bl	800151e <HAL_SYSTICK_Config>
 80012c4:	1e03      	subs	r3, r0, #0
 80012c6:	d001      	beq.n	80012cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e00f      	b.n	80012ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d80b      	bhi.n	80012ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	2301      	movs	r3, #1
 80012d6:	425b      	negs	r3, r3
 80012d8:	2200      	movs	r2, #0
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 f8fa 	bl	80014d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_InitTick+0x64>)
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b003      	add	sp, #12
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000004 	.word	0x20000004

08001300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x1c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	001a      	movs	r2, r3
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x20>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	18d2      	adds	r2, r2, r3
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_IncTick+0x20>)
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	20000008 	.word	0x20000008
 8001320:	20000084 	.word	0x20000084

08001324 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <HAL_GetTick+0x10>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	20000084 	.word	0x20000084

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff fff0 	bl	8001324 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3301      	adds	r3, #1
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_Delay+0x40>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	001a      	movs	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	189b      	adds	r3, r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	f7ff ffe0 	bl	8001324 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000008 	.word	0x20000008

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	0002      	movs	r2, r0
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b7f      	cmp	r3, #127	; 0x7f
 800138e:	d809      	bhi.n	80013a4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	001a      	movs	r2, r3
 8001396:	231f      	movs	r3, #31
 8001398:	401a      	ands	r2, r3
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_EnableIRQ+0x30>)
 800139c:	2101      	movs	r1, #1
 800139e:	4091      	lsls	r1, r2
 80013a0:	000a      	movs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
  }
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	0002      	movs	r2, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b7f      	cmp	r3, #127	; 0x7f
 80013c4:	d828      	bhi.n	8001418 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <__NVIC_SetPriority+0xd4>)
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	33c0      	adds	r3, #192	; 0xc0
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	589b      	ldr	r3, [r3, r2]
 80013d6:	1dfa      	adds	r2, r7, #7
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	0011      	movs	r1, r2
 80013dc:	2203      	movs	r2, #3
 80013de:	400a      	ands	r2, r1
 80013e0:	00d2      	lsls	r2, r2, #3
 80013e2:	21ff      	movs	r1, #255	; 0xff
 80013e4:	4091      	lsls	r1, r2
 80013e6:	000a      	movs	r2, r1
 80013e8:	43d2      	mvns	r2, r2
 80013ea:	401a      	ands	r2, r3
 80013ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	22ff      	movs	r2, #255	; 0xff
 80013f4:	401a      	ands	r2, r3
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	0018      	movs	r0, r3
 80013fc:	2303      	movs	r3, #3
 80013fe:	4003      	ands	r3, r0
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001404:	481f      	ldr	r0, [pc, #124]	; (8001484 <__NVIC_SetPriority+0xd4>)
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25b      	sxtb	r3, r3
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	430a      	orrs	r2, r1
 8001410:	33c0      	adds	r3, #192	; 0xc0
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001416:	e031      	b.n	800147c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <__NVIC_SetPriority+0xd8>)
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	0019      	movs	r1, r3
 8001420:	230f      	movs	r3, #15
 8001422:	400b      	ands	r3, r1
 8001424:	3b08      	subs	r3, #8
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3306      	adds	r3, #6
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	18d3      	adds	r3, r2, r3
 800142e:	3304      	adds	r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	1dfa      	adds	r2, r7, #7
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	0011      	movs	r1, r2
 8001438:	2203      	movs	r2, #3
 800143a:	400a      	ands	r2, r1
 800143c:	00d2      	lsls	r2, r2, #3
 800143e:	21ff      	movs	r1, #255	; 0xff
 8001440:	4091      	lsls	r1, r2
 8001442:	000a      	movs	r2, r1
 8001444:	43d2      	mvns	r2, r2
 8001446:	401a      	ands	r2, r3
 8001448:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	22ff      	movs	r2, #255	; 0xff
 8001450:	401a      	ands	r2, r3
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	0018      	movs	r0, r3
 8001458:	2303      	movs	r3, #3
 800145a:	4003      	ands	r3, r0
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001460:	4809      	ldr	r0, [pc, #36]	; (8001488 <__NVIC_SetPriority+0xd8>)
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	001c      	movs	r4, r3
 8001468:	230f      	movs	r3, #15
 800146a:	4023      	ands	r3, r4
 800146c:	3b08      	subs	r3, #8
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	430a      	orrs	r2, r1
 8001472:	3306      	adds	r3, #6
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	18c3      	adds	r3, r0, r3
 8001478:	3304      	adds	r3, #4
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b003      	add	sp, #12
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <SysTick_Config+0x40>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e010      	b.n	80014c4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <SysTick_Config+0x44>)
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	3a01      	subs	r2, #1
 80014a8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	2301      	movs	r3, #1
 80014ac:	425b      	negs	r3, r3
 80014ae:	2103      	movs	r1, #3
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff ff7d 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <SysTick_Config+0x44>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x44>)
 80014be:	2207      	movs	r2, #7
 80014c0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	00ffffff 	.word	0x00ffffff
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	210f      	movs	r1, #15
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	1c02      	adds	r2, r0, #0
 80014e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	0011      	movs	r1, r2
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff ff5d 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	0002      	movs	r2, r0
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b25b      	sxtb	r3, r3
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ff33 	bl	800137c <__NVIC_EnableIRQ>
}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff ffaf 	bl	800148c <SysTick_Config>
 800152e:	0003      	movs	r3, r0
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001546:	e14f      	b.n	80017e8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4091      	lsls	r1, r2
 8001552:	000a      	movs	r2, r1
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d100      	bne.n	8001560 <HAL_GPIO_Init+0x28>
 800155e:	e140      	b.n	80017e2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d00b      	beq.n	8001580 <HAL_GPIO_Init+0x48>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d007      	beq.n	8001580 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001574:	2b11      	cmp	r3, #17
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b12      	cmp	r3, #18
 800157e:	d130      	bne.n	80015e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	409a      	lsls	r2, r3
 800158e:	0013      	movs	r3, r2
 8001590:	43da      	mvns	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	409a      	lsls	r2, r3
 80015a2:	0013      	movs	r3, r2
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b6:	2201      	movs	r2, #1
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	43da      	mvns	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	2201      	movs	r2, #1
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	43da      	mvns	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	409a      	lsls	r2, r3
 8001604:	0013      	movs	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0xea>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b12      	cmp	r3, #18
 8001620:	d123      	bne.n	800166a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3208      	adds	r2, #8
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	58d3      	ldr	r3, [r2, r3]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2207      	movs	r2, #7
 8001634:	4013      	ands	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	409a      	lsls	r2, r3
 800163c:	0013      	movs	r3, r2
 800163e:	43da      	mvns	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2107      	movs	r1, #7
 800164e:	400b      	ands	r3, r1
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	08da      	lsrs	r2, r3, #3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3208      	adds	r2, #8
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	6939      	ldr	r1, [r7, #16]
 8001668:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	409a      	lsls	r2, r3
 8001678:	0013      	movs	r3, r2
 800167a:	43da      	mvns	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2203      	movs	r2, #3
 8001688:	401a      	ands	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	409a      	lsls	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	055b      	lsls	r3, r3, #21
 80016a6:	4013      	ands	r3, r2
 80016a8:	d100      	bne.n	80016ac <HAL_GPIO_Init+0x174>
 80016aa:	e09a      	b.n	80017e2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ac:	4b54      	ldr	r3, [pc, #336]	; (8001800 <HAL_GPIO_Init+0x2c8>)
 80016ae:	699a      	ldr	r2, [r3, #24]
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_GPIO_Init+0x2c8>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	430a      	orrs	r2, r1
 80016b6:	619a      	str	r2, [r3, #24]
 80016b8:	4b51      	ldr	r3, [pc, #324]	; (8001800 <HAL_GPIO_Init+0x2c8>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2201      	movs	r2, #1
 80016be:	4013      	ands	r3, r2
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016c4:	4a4f      	ldr	r2, [pc, #316]	; (8001804 <HAL_GPIO_Init+0x2cc>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	589b      	ldr	r3, [r3, r2]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2203      	movs	r2, #3
 80016d6:	4013      	ands	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	220f      	movs	r2, #15
 80016dc:	409a      	lsls	r2, r3
 80016de:	0013      	movs	r3, r2
 80016e0:	43da      	mvns	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	2390      	movs	r3, #144	; 0x90
 80016ec:	05db      	lsls	r3, r3, #23
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0x1e2>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a44      	ldr	r2, [pc, #272]	; (8001808 <HAL_GPIO_Init+0x2d0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00d      	beq.n	8001716 <HAL_GPIO_Init+0x1de>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a43      	ldr	r2, [pc, #268]	; (800180c <HAL_GPIO_Init+0x2d4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x1da>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a42      	ldr	r2, [pc, #264]	; (8001810 <HAL_GPIO_Init+0x2d8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_GPIO_Init+0x1d6>
 800170a:	2303      	movs	r3, #3
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x1e4>
 800170e:	2305      	movs	r3, #5
 8001710:	e004      	b.n	800171c <HAL_GPIO_Init+0x1e4>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x1e4>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x1e4>
 800171a:	2300      	movs	r3, #0
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	2103      	movs	r1, #3
 8001720:	400a      	ands	r2, r1
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	4093      	lsls	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800172c:	4935      	ldr	r1, [pc, #212]	; (8001804 <HAL_GPIO_Init+0x2cc>)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800173a:	4b36      	ldr	r3, [pc, #216]	; (8001814 <HAL_GPIO_Init+0x2dc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	43da      	mvns	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	025b      	lsls	r3, r3, #9
 8001752:	4013      	ands	r3, r2
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800175e:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <HAL_GPIO_Init+0x2dc>)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_GPIO_Init+0x2dc>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43da      	mvns	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	4013      	ands	r3, r2
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <HAL_GPIO_Init+0x2dc>)
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_GPIO_Init+0x2dc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43da      	mvns	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	035b      	lsls	r3, r3, #13
 80017a6:	4013      	ands	r3, r2
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_GPIO_Init+0x2dc>)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_GPIO_Init+0x2dc>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43da      	mvns	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	039b      	lsls	r3, r3, #14
 80017d0:	4013      	ands	r3, r2
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <HAL_GPIO_Init+0x2dc>)
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	40da      	lsrs	r2, r3
 80017f0:	1e13      	subs	r3, r2, #0
 80017f2:	d000      	beq.n	80017f6 <HAL_GPIO_Init+0x2be>
 80017f4:	e6a8      	b.n	8001548 <HAL_GPIO_Init+0x10>
  } 
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b006      	add	sp, #24
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40021000 	.word	0x40021000
 8001804:	40010000 	.word	0x40010000
 8001808:	48000400 	.word	0x48000400
 800180c:	48000800 	.word	0x48000800
 8001810:	48000c00 	.word	0x48000c00
 8001814:	40010400 	.word	0x40010400

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	0008      	movs	r0, r1
 8001822:	0011      	movs	r1, r2
 8001824:	1cbb      	adds	r3, r7, #2
 8001826:	1c02      	adds	r2, r0, #0
 8001828:	801a      	strh	r2, [r3, #0]
 800182a:	1c7b      	adds	r3, r7, #1
 800182c:	1c0a      	adds	r2, r1, #0
 800182e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001830:	1c7b      	adds	r3, r7, #1
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001838:	1cbb      	adds	r3, r7, #2
 800183a:	881a      	ldrh	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001840:	e003      	b.n	800184a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001842:	1cbb      	adds	r3, r7, #2
 8001844:	881a      	ldrh	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b002      	add	sp, #8
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	0002      	movs	r2, r0
 800185c:	1dbb      	adds	r3, r7, #6
 800185e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	1dba      	adds	r2, r7, #6
 8001866:	8812      	ldrh	r2, [r2, #0]
 8001868:	4013      	ands	r3, r2
 800186a:	d008      	beq.n	800187e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800186e:	1dba      	adds	r2, r7, #6
 8001870:	8812      	ldrh	r2, [r2, #0]
 8001872:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001874:	1dbb      	adds	r3, r7, #6
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	0018      	movs	r0, r3
 800187a:	f7ff fc23 	bl	80010c4 <HAL_GPIO_EXTI_Callback>
  }
}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b002      	add	sp, #8
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e082      	b.n	80019a4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2241      	movs	r2, #65	; 0x41
 80018a2:	5c9b      	ldrb	r3, [r3, r2]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d107      	bne.n	80018ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2240      	movs	r2, #64	; 0x40
 80018ae:	2100      	movs	r1, #0
 80018b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff fc3f 	bl	8001138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2241      	movs	r2, #65	; 0x41
 80018be:	2124      	movs	r1, #36	; 0x24
 80018c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2101      	movs	r1, #1
 80018ce:	438a      	bics	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4934      	ldr	r1, [pc, #208]	; (80019ac <HAL_I2C_Init+0x120>)
 80018dc:	400a      	ands	r2, r1
 80018de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4931      	ldr	r1, [pc, #196]	; (80019b0 <HAL_I2C_Init+0x124>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d108      	bne.n	800190a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	0209      	lsls	r1, r1, #8
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	e007      	b.n	800191a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2184      	movs	r1, #132	; 0x84
 8001914:	0209      	lsls	r1, r1, #8
 8001916:	430a      	orrs	r2, r1
 8001918:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d104      	bne.n	800192c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	491f      	ldr	r1, [pc, #124]	; (80019b4 <HAL_I2C_Init+0x128>)
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	491a      	ldr	r1, [pc, #104]	; (80019b0 <HAL_I2C_Init+0x124>)
 8001948:	400a      	ands	r2, r1
 800194a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	431a      	orrs	r2, r3
 8001956:	0011      	movs	r1, r2
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	021a      	lsls	r2, r3, #8
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69d9      	ldr	r1, [r3, #28]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1a      	ldr	r2, [r3, #32]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2241      	movs	r2, #65	; 0x41
 8001990:	2120      	movs	r1, #32
 8001992:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2242      	movs	r2, #66	; 0x42
 800199e:	2100      	movs	r1, #0
 80019a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	f0ffffff 	.word	0xf0ffffff
 80019b0:	ffff7fff 	.word	0xffff7fff
 80019b4:	02008000 	.word	0x02008000

080019b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	0008      	movs	r0, r1
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	0019      	movs	r1, r3
 80019c6:	230a      	movs	r3, #10
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	1c02      	adds	r2, r0, #0
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	2308      	movs	r3, #8
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	1c0a      	adds	r2, r1, #0
 80019d4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2241      	movs	r2, #65	; 0x41
 80019da:	5c9b      	ldrb	r3, [r3, r2]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b20      	cmp	r3, #32
 80019e0:	d000      	beq.n	80019e4 <HAL_I2C_Master_Transmit+0x2c>
 80019e2:	e0e7      	b.n	8001bb4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2240      	movs	r2, #64	; 0x40
 80019e8:	5c9b      	ldrb	r3, [r3, r2]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_I2C_Master_Transmit+0x3a>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e0e1      	b.n	8001bb6 <HAL_I2C_Master_Transmit+0x1fe>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2240      	movs	r2, #64	; 0x40
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019fa:	f7ff fc93 	bl	8001324 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	0219      	lsls	r1, r3, #8
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2319      	movs	r3, #25
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f000 fa04 	bl	8001e1c <I2C_WaitOnFlagUntilTimeout>
 8001a14:	1e03      	subs	r3, r0, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0cc      	b.n	8001bb6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2241      	movs	r2, #65	; 0x41
 8001a20:	2121      	movs	r1, #33	; 0x21
 8001a22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2242      	movs	r2, #66	; 0x42
 8001a28:	2110      	movs	r1, #16
 8001a2a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	18ba      	adds	r2, r7, r2
 8001a3e:	8812      	ldrh	r2, [r2, #0]
 8001a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	2bff      	cmp	r3, #255	; 0xff
 8001a50:	d911      	bls.n	8001a76 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	22ff      	movs	r2, #255	; 0xff
 8001a56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	045c      	lsls	r4, r3, #17
 8001a62:	230a      	movs	r3, #10
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	8819      	ldrh	r1, [r3, #0]
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	4b55      	ldr	r3, [pc, #340]	; (8001bc0 <HAL_I2C_Master_Transmit+0x208>)
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	0023      	movs	r3, r4
 8001a70:	f000 fb60 	bl	8002134 <I2C_TransferConfig>
 8001a74:	e075      	b.n	8001b62 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	049c      	lsls	r4, r3, #18
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	8819      	ldrh	r1, [r3, #0]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <HAL_I2C_Master_Transmit+0x208>)
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	0023      	movs	r3, r4
 8001a98:	f000 fb4c 	bl	8002134 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001a9c:	e061      	b.n	8001b62 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f000 f9f8 	bl	8001e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8001aaa:	1e03      	subs	r3, r0, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e081      	b.n	8001bb6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d03a      	beq.n	8001b62 <HAL_I2C_Master_Transmit+0x1aa>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d136      	bne.n	8001b62 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	0013      	movs	r3, r2
 8001afe:	2200      	movs	r2, #0
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	f000 f98b 	bl	8001e1c <I2C_WaitOnFlagUntilTimeout>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e053      	b.n	8001bb6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2bff      	cmp	r3, #255	; 0xff
 8001b16:	d911      	bls.n	8001b3c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	22ff      	movs	r2, #255	; 0xff
 8001b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	045c      	lsls	r4, r3, #17
 8001b28:	230a      	movs	r3, #10
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	8819      	ldrh	r1, [r3, #0]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	0023      	movs	r3, r4
 8001b36:	f000 fafd 	bl	8002134 <I2C_TransferConfig>
 8001b3a:	e012      	b.n	8001b62 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	049c      	lsls	r4, r3, #18
 8001b50:	230a      	movs	r3, #10
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	8819      	ldrh	r1, [r3, #0]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	0023      	movs	r3, r4
 8001b5e:	f000 fae9 	bl	8002134 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d198      	bne.n	8001a9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 f9d0 	bl	8001f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b78:	1e03      	subs	r3, r0, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e01a      	b.n	8001bb6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2220      	movs	r2, #32
 8001b86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	490c      	ldr	r1, [pc, #48]	; (8001bc4 <HAL_I2C_Master_Transmit+0x20c>)
 8001b94:	400a      	ands	r2, r1
 8001b96:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2241      	movs	r2, #65	; 0x41
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2242      	movs	r2, #66	; 0x42
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	2100      	movs	r1, #0
 8001bae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e000      	b.n	8001bb6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001bb4:	2302      	movs	r3, #2
  }
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b007      	add	sp, #28
 8001bbc:	bd90      	pop	{r4, r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	80002000 	.word	0x80002000
 8001bc4:	fe00e800 	.word	0xfe00e800

08001bc8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	0008      	movs	r0, r1
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	1c02      	adds	r2, r0, #0
 8001bdc:	801a      	strh	r2, [r3, #0]
 8001bde:	2308      	movs	r3, #8
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	1c0a      	adds	r2, r1, #0
 8001be4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2241      	movs	r2, #65	; 0x41
 8001bea:	5c9b      	ldrb	r3, [r3, r2]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	d000      	beq.n	8001bf4 <HAL_I2C_Master_Receive+0x2c>
 8001bf2:	e0e8      	b.n	8001dc6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_I2C_Master_Receive+0x3a>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0e2      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x200>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2240      	movs	r2, #64	; 0x40
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c0a:	f7ff fb8b 	bl	8001324 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	0219      	lsls	r1, r3, #8
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2319      	movs	r3, #25
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f000 f8fc 	bl	8001e1c <I2C_WaitOnFlagUntilTimeout>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0cd      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2241      	movs	r2, #65	; 0x41
 8001c30:	2122      	movs	r1, #34	; 0x22
 8001c32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2242      	movs	r2, #66	; 0x42
 8001c38:	2110      	movs	r1, #16
 8001c3a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	18ba      	adds	r2, r7, r2
 8001c4e:	8812      	ldrh	r2, [r2, #0]
 8001c50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2bff      	cmp	r3, #255	; 0xff
 8001c60:	d911      	bls.n	8001c86 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	22ff      	movs	r2, #255	; 0xff
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	045c      	lsls	r4, r3, #17
 8001c72:	230a      	movs	r3, #10
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	8819      	ldrh	r1, [r3, #0]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <HAL_I2C_Master_Receive+0x208>)
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	0023      	movs	r3, r4
 8001c80:	f000 fa58 	bl	8002134 <I2C_TransferConfig>
 8001c84:	e076      	b.n	8001d74 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	049c      	lsls	r4, r3, #18
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	8819      	ldrh	r1, [r3, #0]
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <HAL_I2C_Master_Receive+0x208>)
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	0023      	movs	r3, r4
 8001ca8:	f000 fa44 	bl	8002134 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001cac:	e062      	b.n	8001d74 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f000 f96b 	bl	8001f90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cba:	1e03      	subs	r3, r0, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e082      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03a      	beq.n	8001d74 <HAL_I2C_Master_Receive+0x1ac>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d136      	bne.n	8001d74 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	0013      	movs	r3, r2
 8001d10:	2200      	movs	r2, #0
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	f000 f882 	bl	8001e1c <I2C_WaitOnFlagUntilTimeout>
 8001d18:	1e03      	subs	r3, r0, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e053      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2bff      	cmp	r3, #255	; 0xff
 8001d28:	d911      	bls.n	8001d4e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	22ff      	movs	r2, #255	; 0xff
 8001d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	045c      	lsls	r4, r3, #17
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	8819      	ldrh	r1, [r3, #0]
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	2300      	movs	r3, #0
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	0023      	movs	r3, r4
 8001d48:	f000 f9f4 	bl	8002134 <I2C_TransferConfig>
 8001d4c:	e012      	b.n	8001d74 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	049c      	lsls	r4, r3, #18
 8001d62:	230a      	movs	r3, #10
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	8819      	ldrh	r1, [r3, #0]
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	0023      	movs	r3, r4
 8001d70:	f000 f9e0 	bl	8002134 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d197      	bne.n	8001cae <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f000 f8c7 	bl	8001f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d8a:	1e03      	subs	r3, r0, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e01a      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2220      	movs	r2, #32
 8001d98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	490b      	ldr	r1, [pc, #44]	; (8001dd4 <HAL_I2C_Master_Receive+0x20c>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2241      	movs	r2, #65	; 0x41
 8001dae:	2120      	movs	r1, #32
 8001db0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2242      	movs	r2, #66	; 0x42
 8001db6:	2100      	movs	r1, #0
 8001db8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2240      	movs	r2, #64	; 0x40
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
  }
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b007      	add	sp, #28
 8001dce:	bd90      	pop	{r4, r7, pc}
 8001dd0:	80002400 	.word	0x80002400
 8001dd4:	fe00e800 	.word	0xfe00e800

08001dd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2202      	movs	r2, #2
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d103      	bne.n	8001df6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d007      	beq.n	8001e14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2101      	movs	r1, #1
 8001e10:	430a      	orrs	r2, r1
 8001e12:	619a      	str	r2, [r3, #24]
  }
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	1dfb      	adds	r3, r7, #7
 8001e2a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e2c:	e021      	b.n	8001e72 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	d01e      	beq.n	8001e72 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e34:	f7ff fa76 	bl	8001324 <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d302      	bcc.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d113      	bne.n	8001e72 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	2220      	movs	r2, #32
 8001e50:	431a      	orrs	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2241      	movs	r2, #65	; 0x41
 8001e5a:	2120      	movs	r1, #32
 8001e5c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2242      	movs	r2, #66	; 0x42
 8001e62:	2100      	movs	r1, #0
 8001e64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	425a      	negs	r2, r3
 8001e82:	4153      	adcs	r3, r2
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	001a      	movs	r2, r3
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d0ce      	beq.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b004      	add	sp, #16
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ea6:	e02b      	b.n	8001f00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	68b9      	ldr	r1, [r7, #8]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 f8da 	bl	8002068 <I2C_IsAcknowledgeFailed>
 8001eb4:	1e03      	subs	r3, r0, #0
 8001eb6:	d001      	beq.n	8001ebc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e029      	b.n	8001f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	d01e      	beq.n	8001f00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec2:	f7ff fa2f 	bl	8001324 <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d302      	bcc.n	8001ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d113      	bne.n	8001f00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	2220      	movs	r2, #32
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2241      	movs	r2, #65	; 0x41
 8001ee8:	2120      	movs	r1, #32
 8001eea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2242      	movs	r2, #66	; 0x42
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2240      	movs	r2, #64	; 0x40
 8001ef8:	2100      	movs	r1, #0
 8001efa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e007      	b.n	8001f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2202      	movs	r2, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d1cc      	bne.n	8001ea8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b004      	add	sp, #16
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f24:	e028      	b.n	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 f89b 	bl	8002068 <I2C_IsAcknowledgeFailed>
 8001f32:	1e03      	subs	r3, r0, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e026      	b.n	8001f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3a:	f7ff f9f3 	bl	8001324 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d302      	bcc.n	8001f50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d113      	bne.n	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	2220      	movs	r2, #32
 8001f56:	431a      	orrs	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2241      	movs	r2, #65	; 0x41
 8001f60:	2120      	movs	r1, #32
 8001f62:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2242      	movs	r2, #66	; 0x42
 8001f68:	2100      	movs	r1, #0
 8001f6a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	2100      	movs	r1, #0
 8001f72:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e007      	b.n	8001f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d1cf      	bne.n	8001f26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f9c:	e055      	b.n	800204a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 f85f 	bl	8002068 <I2C_IsAcknowledgeFailed>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d001      	beq.n	8001fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e053      	b.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d129      	bne.n	8002014 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d105      	bne.n	8001fda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e03f      	b.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	491d      	ldr	r1, [pc, #116]	; (8002064 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001fee:	400a      	ands	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2241      	movs	r2, #65	; 0x41
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2242      	movs	r2, #66	; 0x42
 8002004:	2100      	movs	r1, #0
 8002006:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2240      	movs	r2, #64	; 0x40
 800200c:	2100      	movs	r1, #0
 800200e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e022      	b.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002014:	f7ff f986 	bl	8001324 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	429a      	cmp	r2, r3
 8002022:	d302      	bcc.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10f      	bne.n	800204a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	2220      	movs	r2, #32
 8002030:	431a      	orrs	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2241      	movs	r2, #65	; 0x41
 800203a:	2120      	movs	r1, #32
 800203c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2240      	movs	r2, #64	; 0x40
 8002042:	2100      	movs	r1, #0
 8002044:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e007      	b.n	800205a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2204      	movs	r2, #4
 8002052:	4013      	ands	r3, r2
 8002054:	2b04      	cmp	r3, #4
 8002056:	d1a2      	bne.n	8001f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	fe00e800 	.word	0xfe00e800

08002068 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2210      	movs	r2, #16
 800207c:	4013      	ands	r3, r2
 800207e:	2b10      	cmp	r3, #16
 8002080:	d151      	bne.n	8002126 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002082:	e021      	b.n	80020c8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3301      	adds	r3, #1
 8002088:	d01e      	beq.n	80020c8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208a:	f7ff f94b 	bl	8001324 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	429a      	cmp	r2, r3
 8002098:	d302      	bcc.n	80020a0 <I2C_IsAcknowledgeFailed+0x38>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d113      	bne.n	80020c8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	2220      	movs	r2, #32
 80020a6:	431a      	orrs	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2241      	movs	r2, #65	; 0x41
 80020b0:	2120      	movs	r1, #32
 80020b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2242      	movs	r2, #66	; 0x42
 80020b8:	2100      	movs	r1, #0
 80020ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	2100      	movs	r1, #0
 80020c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e02f      	b.n	8002128 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2220      	movs	r2, #32
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d1d6      	bne.n	8002084 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2210      	movs	r2, #16
 80020dc:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2220      	movs	r2, #32
 80020e4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f7ff fe75 	bl	8001dd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	490d      	ldr	r1, [pc, #52]	; (8002130 <I2C_IsAcknowledgeFailed+0xc8>)
 80020fa:	400a      	ands	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	2204      	movs	r2, #4
 8002104:	431a      	orrs	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2241      	movs	r2, #65	; 0x41
 800210e:	2120      	movs	r1, #32
 8002110:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2242      	movs	r2, #66	; 0x42
 8002116:	2100      	movs	r1, #0
 8002118:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2240      	movs	r2, #64	; 0x40
 800211e:	2100      	movs	r1, #0
 8002120:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b004      	add	sp, #16
 800212e:	bd80      	pop	{r7, pc}
 8002130:	fe00e800 	.word	0xfe00e800

08002134 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	0008      	movs	r0, r1
 800213e:	0011      	movs	r1, r2
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	240a      	movs	r4, #10
 8002144:	193b      	adds	r3, r7, r4
 8002146:	1c02      	adds	r2, r0, #0
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	2009      	movs	r0, #9
 800214c:	183b      	adds	r3, r7, r0
 800214e:	1c0a      	adds	r2, r1, #0
 8002150:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	6a3a      	ldr	r2, [r7, #32]
 800215a:	0d51      	lsrs	r1, r2, #21
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	00d2      	lsls	r2, r2, #3
 8002160:	400a      	ands	r2, r1
 8002162:	490e      	ldr	r1, [pc, #56]	; (800219c <I2C_TransferConfig+0x68>)
 8002164:	430a      	orrs	r2, r1
 8002166:	43d2      	mvns	r2, r2
 8002168:	401a      	ands	r2, r3
 800216a:	0011      	movs	r1, r2
 800216c:	193b      	adds	r3, r7, r4
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	059b      	lsls	r3, r3, #22
 8002172:	0d9a      	lsrs	r2, r3, #22
 8002174:	183b      	adds	r3, r7, r0
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	0418      	lsls	r0, r3, #16
 800217a:	23ff      	movs	r3, #255	; 0xff
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	4003      	ands	r3, r0
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	431a      	orrs	r2, r3
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	431a      	orrs	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	46bd      	mov	sp, r7
 8002196:	b005      	add	sp, #20
 8002198:	bd90      	pop	{r4, r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	03ff63ff 	.word	0x03ff63ff

080021a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2241      	movs	r2, #65	; 0x41
 80021ae:	5c9b      	ldrb	r3, [r3, r2]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d138      	bne.n	8002228 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2240      	movs	r2, #64	; 0x40
 80021ba:	5c9b      	ldrb	r3, [r3, r2]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e032      	b.n	800222a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2240      	movs	r2, #64	; 0x40
 80021c8:	2101      	movs	r1, #1
 80021ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2241      	movs	r2, #65	; 0x41
 80021d0:	2124      	movs	r1, #36	; 0x24
 80021d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2101      	movs	r1, #1
 80021e0:	438a      	bics	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4911      	ldr	r1, [pc, #68]	; (8002234 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021f0:	400a      	ands	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6819      	ldr	r1, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2101      	movs	r1, #1
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2241      	movs	r2, #65	; 0x41
 8002218:	2120      	movs	r1, #32
 800221a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2240      	movs	r2, #64	; 0x40
 8002220:	2100      	movs	r1, #0
 8002222:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	0018      	movs	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	b002      	add	sp, #8
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	ffffefff 	.word	0xffffefff

08002238 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2241      	movs	r2, #65	; 0x41
 8002246:	5c9b      	ldrb	r3, [r3, r2]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b20      	cmp	r3, #32
 800224c:	d139      	bne.n	80022c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2240      	movs	r2, #64	; 0x40
 8002252:	5c9b      	ldrb	r3, [r3, r2]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002258:	2302      	movs	r3, #2
 800225a:	e033      	b.n	80022c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2240      	movs	r2, #64	; 0x40
 8002260:	2101      	movs	r1, #1
 8002262:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2241      	movs	r2, #65	; 0x41
 8002268:	2124      	movs	r1, #36	; 0x24
 800226a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2101      	movs	r1, #1
 8002278:	438a      	bics	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2241      	movs	r2, #65	; 0x41
 80022b2:	2120      	movs	r1, #32
 80022b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2240      	movs	r2, #64	; 0x40
 80022ba:	2100      	movs	r1, #0
 80022bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
  }
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b004      	add	sp, #16
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	fffff0ff 	.word	0xfffff0ff

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e303      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2201      	movs	r2, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	d100      	bne.n	80022ee <HAL_RCC_OscConfig+0x1e>
 80022ec:	e08d      	b.n	800240a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022ee:	4bc4      	ldr	r3, [pc, #784]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	220c      	movs	r2, #12
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d00e      	beq.n	8002318 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022fa:	4bc1      	ldr	r3, [pc, #772]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	220c      	movs	r2, #12
 8002300:	4013      	ands	r3, r2
 8002302:	2b08      	cmp	r3, #8
 8002304:	d116      	bne.n	8002334 <HAL_RCC_OscConfig+0x64>
 8002306:	4bbe      	ldr	r3, [pc, #760]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	025b      	lsls	r3, r3, #9
 800230e:	401a      	ands	r2, r3
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	025b      	lsls	r3, r3, #9
 8002314:	429a      	cmp	r2, r3
 8002316:	d10d      	bne.n	8002334 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	4bb9      	ldr	r3, [pc, #740]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	029b      	lsls	r3, r3, #10
 8002320:	4013      	ands	r3, r2
 8002322:	d100      	bne.n	8002326 <HAL_RCC_OscConfig+0x56>
 8002324:	e070      	b.n	8002408 <HAL_RCC_OscConfig+0x138>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d000      	beq.n	8002330 <HAL_RCC_OscConfig+0x60>
 800232e:	e06b      	b.n	8002408 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e2da      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x7c>
 800233c:	4bb0      	ldr	r3, [pc, #704]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4baf      	ldr	r3, [pc, #700]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0249      	lsls	r1, r1, #9
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e02f      	b.n	80023ac <HAL_RCC_OscConfig+0xdc>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10c      	bne.n	800236e <HAL_RCC_OscConfig+0x9e>
 8002354:	4baa      	ldr	r3, [pc, #680]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4ba9      	ldr	r3, [pc, #676]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 800235a:	49aa      	ldr	r1, [pc, #680]	; (8002604 <HAL_RCC_OscConfig+0x334>)
 800235c:	400a      	ands	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	4ba7      	ldr	r3, [pc, #668]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4ba6      	ldr	r3, [pc, #664]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002366:	49a8      	ldr	r1, [pc, #672]	; (8002608 <HAL_RCC_OscConfig+0x338>)
 8002368:	400a      	ands	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e01e      	b.n	80023ac <HAL_RCC_OscConfig+0xdc>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b05      	cmp	r3, #5
 8002374:	d10e      	bne.n	8002394 <HAL_RCC_OscConfig+0xc4>
 8002376:	4ba2      	ldr	r3, [pc, #648]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4ba1      	ldr	r3, [pc, #644]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	02c9      	lsls	r1, r1, #11
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	4b9e      	ldr	r3, [pc, #632]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b9d      	ldr	r3, [pc, #628]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 800238a:	2180      	movs	r1, #128	; 0x80
 800238c:	0249      	lsls	r1, r1, #9
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xdc>
 8002394:	4b9a      	ldr	r3, [pc, #616]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b99      	ldr	r3, [pc, #612]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 800239a:	499a      	ldr	r1, [pc, #616]	; (8002604 <HAL_RCC_OscConfig+0x334>)
 800239c:	400a      	ands	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	4b97      	ldr	r3, [pc, #604]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b96      	ldr	r3, [pc, #600]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80023a6:	4998      	ldr	r1, [pc, #608]	; (8002608 <HAL_RCC_OscConfig+0x338>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d014      	beq.n	80023de <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe ffb6 	bl	8001324 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023be:	f7fe ffb1 	bl	8001324 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	; 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e28c      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d0:	4b8b      	ldr	r3, [pc, #556]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	029b      	lsls	r3, r3, #10
 80023d8:	4013      	ands	r3, r2
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0xee>
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7fe ffa1 	bl	8001324 <HAL_GetTick>
 80023e2:	0003      	movs	r3, r0
 80023e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe ff9c 	bl	8001324 <HAL_GetTick>
 80023ec:	0002      	movs	r2, r0
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e277      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	4b81      	ldr	r3, [pc, #516]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	029b      	lsls	r3, r3, #10
 8002402:	4013      	ands	r3, r2
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x118>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2202      	movs	r2, #2
 8002410:	4013      	ands	r3, r2
 8002412:	d100      	bne.n	8002416 <HAL_RCC_OscConfig+0x146>
 8002414:	e069      	b.n	80024ea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002416:	4b7a      	ldr	r3, [pc, #488]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	220c      	movs	r2, #12
 800241c:	4013      	ands	r3, r2
 800241e:	d00b      	beq.n	8002438 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002420:	4b77      	ldr	r3, [pc, #476]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	220c      	movs	r2, #12
 8002426:	4013      	ands	r3, r2
 8002428:	2b08      	cmp	r3, #8
 800242a:	d11c      	bne.n	8002466 <HAL_RCC_OscConfig+0x196>
 800242c:	4b74      	ldr	r3, [pc, #464]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	025b      	lsls	r3, r3, #9
 8002434:	4013      	ands	r3, r2
 8002436:	d116      	bne.n	8002466 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002438:	4b71      	ldr	r3, [pc, #452]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2202      	movs	r2, #2
 800243e:	4013      	ands	r3, r2
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x17e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e24d      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b6c      	ldr	r3, [pc, #432]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	22f8      	movs	r2, #248	; 0xf8
 8002454:	4393      	bics	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	00da      	lsls	r2, r3, #3
 800245e:	4b68      	ldr	r3, [pc, #416]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002464:	e041      	b.n	80024ea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d024      	beq.n	80024b8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246e:	4b64      	ldr	r3, [pc, #400]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b63      	ldr	r3, [pc, #396]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002474:	2101      	movs	r1, #1
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7fe ff53 	bl	8001324 <HAL_GetTick>
 800247e:	0003      	movs	r3, r0
 8002480:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002484:	f7fe ff4e 	bl	8001324 <HAL_GetTick>
 8002488:	0002      	movs	r2, r0
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e229      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b5a      	ldr	r3, [pc, #360]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2202      	movs	r2, #2
 800249c:	4013      	ands	r3, r2
 800249e:	d0f1      	beq.n	8002484 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b57      	ldr	r3, [pc, #348]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	22f8      	movs	r2, #248	; 0xf8
 80024a6:	4393      	bics	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00da      	lsls	r2, r3, #3
 80024b0:	4b53      	ldr	r3, [pc, #332]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e018      	b.n	80024ea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b8:	4b51      	ldr	r3, [pc, #324]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b50      	ldr	r3, [pc, #320]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80024be:	2101      	movs	r1, #1
 80024c0:	438a      	bics	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe ff2e 	bl	8001324 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ce:	f7fe ff29 	bl	8001324 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e204      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e0:	4b47      	ldr	r3, [pc, #284]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d1f1      	bne.n	80024ce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2208      	movs	r2, #8
 80024f0:	4013      	ands	r3, r2
 80024f2:	d036      	beq.n	8002562 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d019      	beq.n	8002530 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fc:	4b40      	ldr	r3, [pc, #256]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80024fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002500:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002502:	2101      	movs	r1, #1
 8002504:	430a      	orrs	r2, r1
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002508:	f7fe ff0c 	bl	8001324 <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe ff07 	bl	8001324 <HAL_GetTick>
 8002516:	0002      	movs	r2, r0
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e1e2      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002524:	4b36      	ldr	r3, [pc, #216]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	2202      	movs	r2, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d0f1      	beq.n	8002512 <HAL_RCC_OscConfig+0x242>
 800252e:	e018      	b.n	8002562 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002530:	4b33      	ldr	r3, [pc, #204]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002534:	4b32      	ldr	r3, [pc, #200]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002536:	2101      	movs	r1, #1
 8002538:	438a      	bics	r2, r1
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253c:	f7fe fef2 	bl	8001324 <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002546:	f7fe feed 	bl	8001324 <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e1c8      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	4b29      	ldr	r3, [pc, #164]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2202      	movs	r2, #2
 800255e:	4013      	ands	r3, r2
 8002560:	d1f1      	bne.n	8002546 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2204      	movs	r2, #4
 8002568:	4013      	ands	r3, r2
 800256a:	d100      	bne.n	800256e <HAL_RCC_OscConfig+0x29e>
 800256c:	e0b6      	b.n	80026dc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256e:	231f      	movs	r3, #31
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002576:	4b22      	ldr	r3, [pc, #136]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002578:	69da      	ldr	r2, [r3, #28]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	055b      	lsls	r3, r3, #21
 800257e:	4013      	ands	r3, r2
 8002580:	d111      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	0549      	lsls	r1, r1, #21
 800258c:	430a      	orrs	r2, r1
 800258e:	61da      	str	r2, [r3, #28]
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	055b      	lsls	r3, r3, #21
 8002598:	4013      	ands	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800259e:	231f      	movs	r3, #31
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCC_OscConfig+0x33c>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4013      	ands	r3, r2
 80025b0:	d11a      	bne.n	80025e8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_RCC_OscConfig+0x33c>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <HAL_RCC_OscConfig+0x33c>)
 80025b8:	2180      	movs	r1, #128	; 0x80
 80025ba:	0049      	lsls	r1, r1, #1
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c0:	f7fe feb0 	bl	8001324 <HAL_GetTick>
 80025c4:	0003      	movs	r3, r0
 80025c6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ca:	f7fe feab 	bl	8001324 <HAL_GetTick>
 80025ce:	0002      	movs	r2, r0
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b64      	cmp	r3, #100	; 0x64
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e186      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_OscConfig+0x33c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d10f      	bne.n	8002610 <HAL_RCC_OscConfig+0x340>
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80025f2:	6a1a      	ldr	r2, [r3, #32]
 80025f4:	4b02      	ldr	r3, [pc, #8]	; (8002600 <HAL_RCC_OscConfig+0x330>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	430a      	orrs	r2, r1
 80025fa:	621a      	str	r2, [r3, #32]
 80025fc:	e036      	b.n	800266c <HAL_RCC_OscConfig+0x39c>
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	40021000 	.word	0x40021000
 8002604:	fffeffff 	.word	0xfffeffff
 8002608:	fffbffff 	.word	0xfffbffff
 800260c:	40007000 	.word	0x40007000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10c      	bne.n	8002632 <HAL_RCC_OscConfig+0x362>
 8002618:	4bb6      	ldr	r3, [pc, #728]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	4bb5      	ldr	r3, [pc, #724]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800261e:	2101      	movs	r1, #1
 8002620:	438a      	bics	r2, r1
 8002622:	621a      	str	r2, [r3, #32]
 8002624:	4bb3      	ldr	r3, [pc, #716]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002626:	6a1a      	ldr	r2, [r3, #32]
 8002628:	4bb2      	ldr	r3, [pc, #712]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800262a:	2104      	movs	r1, #4
 800262c:	438a      	bics	r2, r1
 800262e:	621a      	str	r2, [r3, #32]
 8002630:	e01c      	b.n	800266c <HAL_RCC_OscConfig+0x39c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b05      	cmp	r3, #5
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x384>
 800263a:	4bae      	ldr	r3, [pc, #696]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800263c:	6a1a      	ldr	r2, [r3, #32]
 800263e:	4bad      	ldr	r3, [pc, #692]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002640:	2104      	movs	r1, #4
 8002642:	430a      	orrs	r2, r1
 8002644:	621a      	str	r2, [r3, #32]
 8002646:	4bab      	ldr	r3, [pc, #684]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002648:	6a1a      	ldr	r2, [r3, #32]
 800264a:	4baa      	ldr	r3, [pc, #680]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800264c:	2101      	movs	r1, #1
 800264e:	430a      	orrs	r2, r1
 8002650:	621a      	str	r2, [r3, #32]
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0x39c>
 8002654:	4ba7      	ldr	r3, [pc, #668]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	4ba6      	ldr	r3, [pc, #664]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800265a:	2101      	movs	r1, #1
 800265c:	438a      	bics	r2, r1
 800265e:	621a      	str	r2, [r3, #32]
 8002660:	4ba4      	ldr	r3, [pc, #656]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002662:	6a1a      	ldr	r2, [r3, #32]
 8002664:	4ba3      	ldr	r3, [pc, #652]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002666:	2104      	movs	r1, #4
 8002668:	438a      	bics	r2, r1
 800266a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d014      	beq.n	800269e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002674:	f7fe fe56 	bl	8001324 <HAL_GetTick>
 8002678:	0003      	movs	r3, r0
 800267a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	e009      	b.n	8002692 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7fe fe51 	bl	8001324 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	4a9b      	ldr	r2, [pc, #620]	; (80028f8 <HAL_RCC_OscConfig+0x628>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e12b      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002692:	4b98      	ldr	r3, [pc, #608]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	2202      	movs	r2, #2
 8002698:	4013      	ands	r3, r2
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x3ae>
 800269c:	e013      	b.n	80026c6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269e:	f7fe fe41 	bl	8001324 <HAL_GetTick>
 80026a2:	0003      	movs	r3, r0
 80026a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a6:	e009      	b.n	80026bc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a8:	f7fe fe3c 	bl	8001324 <HAL_GetTick>
 80026ac:	0002      	movs	r2, r0
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	4a91      	ldr	r2, [pc, #580]	; (80028f8 <HAL_RCC_OscConfig+0x628>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e116      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026bc:	4b8d      	ldr	r3, [pc, #564]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	2202      	movs	r2, #2
 80026c2:	4013      	ands	r3, r2
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026c6:	231f      	movs	r3, #31
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d105      	bne.n	80026dc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d0:	4b88      	ldr	r3, [pc, #544]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	4b87      	ldr	r3, [pc, #540]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80026d6:	4989      	ldr	r1, [pc, #548]	; (80028fc <HAL_RCC_OscConfig+0x62c>)
 80026d8:	400a      	ands	r2, r1
 80026da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2210      	movs	r2, #16
 80026e2:	4013      	ands	r3, r2
 80026e4:	d063      	beq.n	80027ae <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d12a      	bne.n	8002744 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026ee:	4b81      	ldr	r3, [pc, #516]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80026f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f2:	4b80      	ldr	r3, [pc, #512]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80026f4:	2104      	movs	r1, #4
 80026f6:	430a      	orrs	r2, r1
 80026f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80026fa:	4b7e      	ldr	r3, [pc, #504]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80026fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026fe:	4b7d      	ldr	r3, [pc, #500]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002700:	2101      	movs	r1, #1
 8002702:	430a      	orrs	r2, r1
 8002704:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7fe fe0d 	bl	8001324 <HAL_GetTick>
 800270a:	0003      	movs	r3, r0
 800270c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002710:	f7fe fe08 	bl	8001324 <HAL_GetTick>
 8002714:	0002      	movs	r2, r0
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e0e3      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002722:	4b74      	ldr	r3, [pc, #464]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	2202      	movs	r2, #2
 8002728:	4013      	ands	r3, r2
 800272a:	d0f1      	beq.n	8002710 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800272c:	4b71      	ldr	r3, [pc, #452]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800272e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002730:	22f8      	movs	r2, #248	; 0xf8
 8002732:	4393      	bics	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	00da      	lsls	r2, r3, #3
 800273c:	4b6d      	ldr	r3, [pc, #436]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800273e:	430a      	orrs	r2, r1
 8002740:	635a      	str	r2, [r3, #52]	; 0x34
 8002742:	e034      	b.n	80027ae <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	3305      	adds	r3, #5
 800274a:	d111      	bne.n	8002770 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800274c:	4b69      	ldr	r3, [pc, #420]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800274e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002750:	4b68      	ldr	r3, [pc, #416]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002752:	2104      	movs	r1, #4
 8002754:	438a      	bics	r2, r1
 8002756:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002758:	4b66      	ldr	r3, [pc, #408]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	22f8      	movs	r2, #248	; 0xf8
 800275e:	4393      	bics	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	00da      	lsls	r2, r3, #3
 8002768:	4b62      	ldr	r3, [pc, #392]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800276a:	430a      	orrs	r2, r1
 800276c:	635a      	str	r2, [r3, #52]	; 0x34
 800276e:	e01e      	b.n	80027ae <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002770:	4b60      	ldr	r3, [pc, #384]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002774:	4b5f      	ldr	r3, [pc, #380]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002776:	2104      	movs	r1, #4
 8002778:	430a      	orrs	r2, r1
 800277a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800277c:	4b5d      	ldr	r3, [pc, #372]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800277e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002780:	4b5c      	ldr	r3, [pc, #368]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002782:	2101      	movs	r1, #1
 8002784:	438a      	bics	r2, r1
 8002786:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002788:	f7fe fdcc 	bl	8001324 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002792:	f7fe fdc7 	bl	8001324 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0a2      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027a4:	4b53      	ldr	r3, [pc, #332]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80027a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a8:	2202      	movs	r2, #2
 80027aa:	4013      	ands	r3, r2
 80027ac:	d1f1      	bne.n	8002792 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d100      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4e8>
 80027b6:	e097      	b.n	80028e8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	4b4e      	ldr	r3, [pc, #312]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	220c      	movs	r2, #12
 80027be:	4013      	ands	r3, r2
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d100      	bne.n	80027c6 <HAL_RCC_OscConfig+0x4f6>
 80027c4:	e06b      	b.n	800289e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d14c      	bne.n	8002868 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b49      	ldr	r3, [pc, #292]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80027d4:	494a      	ldr	r1, [pc, #296]	; (8002900 <HAL_RCC_OscConfig+0x630>)
 80027d6:	400a      	ands	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7fe fda3 	bl	8001324 <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fe fd9e 	bl	8001324 <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e079      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f6:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	049b      	lsls	r3, r3, #18
 80027fe:	4013      	ands	r3, r2
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002802:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	220f      	movs	r2, #15
 8002808:	4393      	bics	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002810:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002812:	430a      	orrs	r2, r1
 8002814:	62da      	str	r2, [r3, #44]	; 0x2c
 8002816:	4b37      	ldr	r3, [pc, #220]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4a3a      	ldr	r2, [pc, #232]	; (8002904 <HAL_RCC_OscConfig+0x634>)
 800281c:	4013      	ands	r3, r2
 800281e:	0019      	movs	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	431a      	orrs	r2, r3
 800282a:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800282c:	430a      	orrs	r2, r1
 800282e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002836:	2180      	movs	r1, #128	; 0x80
 8002838:	0449      	lsls	r1, r1, #17
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe fd71 	bl	8001324 <HAL_GetTick>
 8002842:	0003      	movs	r3, r0
 8002844:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002848:	f7fe fd6c 	bl	8001324 <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e047      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	049b      	lsls	r3, r3, #18
 8002862:	4013      	ands	r3, r2
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x578>
 8002866:	e03f      	b.n	80028e8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002868:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 800286e:	4924      	ldr	r1, [pc, #144]	; (8002900 <HAL_RCC_OscConfig+0x630>)
 8002870:	400a      	ands	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe fd56 	bl	8001324 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe fd51 	bl	8001324 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e02c      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	049b      	lsls	r3, r3, #18
 8002898:	4013      	ands	r3, r2
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x5ae>
 800289c:	e024      	b.n	80028e8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e01f      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <HAL_RCC_OscConfig+0x624>)
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	025b      	lsls	r3, r3, #9
 80028bc:	401a      	ands	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d10e      	bne.n	80028e4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	220f      	movs	r2, #15
 80028ca:	401a      	ands	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	23f0      	movs	r3, #240	; 0xf0
 80028d8:	039b      	lsls	r3, r3, #14
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b008      	add	sp, #32
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	40021000 	.word	0x40021000
 80028f8:	00001388 	.word	0x00001388
 80028fc:	efffffff 	.word	0xefffffff
 8002900:	feffffff 	.word	0xfeffffff
 8002904:	ffc2ffff 	.word	0xffc2ffff

08002908 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0b3      	b.n	8002a84 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800291c:	4b5b      	ldr	r3, [pc, #364]	; (8002a8c <HAL_RCC_ClockConfig+0x184>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2201      	movs	r2, #1
 8002922:	4013      	ands	r3, r2
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d911      	bls.n	800294e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <HAL_RCC_ClockConfig+0x184>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2201      	movs	r2, #1
 8002930:	4393      	bics	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <HAL_RCC_ClockConfig+0x184>)
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <HAL_RCC_ClockConfig+0x184>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2201      	movs	r2, #1
 8002942:	4013      	ands	r3, r2
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d001      	beq.n	800294e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e09a      	b.n	8002a84 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2202      	movs	r2, #2
 8002954:	4013      	ands	r3, r2
 8002956:	d015      	beq.n	8002984 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2204      	movs	r2, #4
 800295e:	4013      	ands	r3, r2
 8002960:	d006      	beq.n	8002970 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 8002968:	21e0      	movs	r1, #224	; 0xe0
 800296a:	00c9      	lsls	r1, r1, #3
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	22f0      	movs	r2, #240	; 0xf0
 8002976:	4393      	bics	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 8002980:	430a      	orrs	r2, r1
 8002982:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2201      	movs	r2, #1
 800298a:	4013      	ands	r3, r2
 800298c:	d040      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	029b      	lsls	r3, r3, #10
 800299e:	4013      	ands	r3, r2
 80029a0:	d114      	bne.n	80029cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e06e      	b.n	8002a84 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	049b      	lsls	r3, r3, #18
 80029b6:	4013      	ands	r3, r2
 80029b8:	d108      	bne.n	80029cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e062      	b.n	8002a84 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2202      	movs	r2, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e05b      	b.n	8002a84 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	4393      	bics	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 80029dc:	430a      	orrs	r2, r1
 80029de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e0:	f7fe fca0 	bl	8001324 <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e8:	e009      	b.n	80029fe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ea:	f7fe fc9b 	bl	8001324 <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	4a27      	ldr	r2, [pc, #156]	; (8002a94 <HAL_RCC_ClockConfig+0x18c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e042      	b.n	8002a84 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	220c      	movs	r2, #12
 8002a04:	401a      	ands	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1ec      	bne.n	80029ea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <HAL_RCC_ClockConfig+0x184>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2201      	movs	r2, #1
 8002a16:	4013      	ands	r3, r2
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d211      	bcs.n	8002a42 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_RCC_ClockConfig+0x184>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2201      	movs	r2, #1
 8002a24:	4393      	bics	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <HAL_RCC_ClockConfig+0x184>)
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_RCC_ClockConfig+0x184>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2201      	movs	r2, #1
 8002a36:	4013      	ands	r3, r2
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e020      	b.n	8002a84 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2204      	movs	r2, #4
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <HAL_RCC_ClockConfig+0x190>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a60:	f000 f820 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002a64:	0001      	movs	r1, r0
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x188>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	4013      	ands	r3, r2
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x194>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	000a      	movs	r2, r1
 8002a76:	40da      	lsrs	r2, r3
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x198>)
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fe fc0b 	bl	8001298 <HAL_InitTick>
  
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b004      	add	sp, #16
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	00001388 	.word	0x00001388
 8002a98:	fffff8ff 	.word	0xfffff8ff
 8002a9c:	08002e78 	.word	0x08002e78
 8002aa0:	20000000 	.word	0x20000000

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b08f      	sub	sp, #60	; 0x3c
 8002aa8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002aaa:	2314      	movs	r3, #20
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	4a2b      	ldr	r2, [pc, #172]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ab2:	c313      	stmia	r3!, {r0, r1, r4}
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002abc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002abe:	c313      	stmia	r3!, {r0, r1, r4}
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002acc:	2300      	movs	r3, #0
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ad8:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	220c      	movs	r2, #12
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d002      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x4a>
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d003      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x50>
 8002aec:	e02d      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002af2:	e02d      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	0c9b      	lsrs	r3, r3, #18
 8002af8:	220f      	movs	r2, #15
 8002afa:	4013      	ands	r3, r2
 8002afc:	2214      	movs	r2, #20
 8002afe:	18ba      	adds	r2, r7, r2
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	220f      	movs	r2, #15
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	1d3a      	adds	r2, r7, #4
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	025b      	lsls	r3, r3, #9
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b1e:	4812      	ldr	r0, [pc, #72]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b20:	f7fd faf2 	bl	8000108 <__udivsi3>
 8002b24:	0003      	movs	r3, r0
 8002b26:	001a      	movs	r2, r3
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	4353      	muls	r3, r2
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2e:	e009      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b32:	000a      	movs	r2, r1
 8002b34:	0152      	lsls	r2, r2, #5
 8002b36:	1a52      	subs	r2, r2, r1
 8002b38:	0193      	lsls	r3, r2, #6
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	185b      	adds	r3, r3, r1
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b48:	e002      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b4e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b00f      	add	sp, #60	; 0x3c
 8002b58:	bd90      	pop	{r4, r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	08002d98 	.word	0x08002d98
 8002b60:	08002da8 	.word	0x08002da8
 8002b64:	40021000 	.word	0x40021000
 8002b68:	007a1200 	.word	0x007a1200

08002b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	025b      	lsls	r3, r3, #9
 8002b84:	4013      	ands	r3, r2
 8002b86:	d100      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002b88:	e08f      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002b8a:	2317      	movs	r3, #23
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b92:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b94:	69da      	ldr	r2, [r3, #28]
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	055b      	lsls	r3, r3, #21
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d111      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	4b5c      	ldr	r3, [pc, #368]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	0549      	lsls	r1, r1, #21
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	61da      	str	r2, [r3, #28]
 8002bac:	4b58      	ldr	r3, [pc, #352]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	055b      	lsls	r3, r3, #21
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bba:	2317      	movs	r3, #23
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc2:	4b54      	ldr	r3, [pc, #336]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d11a      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bce:	4b51      	ldr	r3, [pc, #324]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4b50      	ldr	r3, [pc, #320]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	0049      	lsls	r1, r1, #1
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bdc:	f7fe fba2 	bl	8001324 <HAL_GetTick>
 8002be0:	0003      	movs	r3, r0
 8002be2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be4:	e008      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be6:	f7fe fb9d 	bl	8001324 <HAL_GetTick>
 8002bea:	0002      	movs	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b64      	cmp	r3, #100	; 0x64
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e087      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4013      	ands	r3, r2
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c04:	4b42      	ldr	r3, [pc, #264]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c06:	6a1a      	ldr	r2, [r3, #32]
 8002c08:	23c0      	movs	r3, #192	; 0xc0
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d034      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	23c0      	movs	r3, #192	; 0xc0
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d02c      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c26:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4a3b      	ldr	r2, [pc, #236]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c30:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c32:	6a1a      	ldr	r2, [r3, #32]
 8002c34:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c36:	2180      	movs	r1, #128	; 0x80
 8002c38:	0249      	lsls	r1, r1, #9
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3e:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c40:	6a1a      	ldr	r2, [r3, #32]
 8002c42:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c44:	4935      	ldr	r1, [pc, #212]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c46:	400a      	ands	r2, r1
 8002c48:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	d013      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fe fb64 	bl	8001324 <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c60:	e009      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7fe fb5f 	bl	8001324 <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	4a2c      	ldr	r2, [pc, #176]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e048      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c76:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c94:	2317      	movs	r3, #23
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d105      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9e:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ca4:	491f      	ldr	r1, [pc, #124]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d009      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb4:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	2203      	movs	r2, #3
 8002cba:	4393      	bics	r3, r2
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	4393      	bics	r3, r2
 8002cda:	0019      	movs	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	2240      	movs	r2, #64	; 0x40
 8002cf8:	4393      	bics	r3, r2
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d02:	430a      	orrs	r2, r1
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b006      	add	sp, #24
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40007000 	.word	0x40007000
 8002d18:	fffffcff 	.word	0xfffffcff
 8002d1c:	fffeffff 	.word	0xfffeffff
 8002d20:	00001388 	.word	0x00001388
 8002d24:	efffffff 	.word	0xefffffff

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	4d0c      	ldr	r5, [pc, #48]	; (8002d60 <__libc_init_array+0x38>)
 8002d2e:	4c0d      	ldr	r4, [pc, #52]	; (8002d64 <__libc_init_array+0x3c>)
 8002d30:	1b64      	subs	r4, r4, r5
 8002d32:	10a4      	asrs	r4, r4, #2
 8002d34:	42a6      	cmp	r6, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	2600      	movs	r6, #0
 8002d3a:	f000 f821 	bl	8002d80 <_init>
 8002d3e:	4d0a      	ldr	r5, [pc, #40]	; (8002d68 <__libc_init_array+0x40>)
 8002d40:	4c0a      	ldr	r4, [pc, #40]	; (8002d6c <__libc_init_array+0x44>)
 8002d42:	1b64      	subs	r4, r4, r5
 8002d44:	10a4      	asrs	r4, r4, #2
 8002d46:	42a6      	cmp	r6, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	00b3      	lsls	r3, r6, #2
 8002d4e:	58eb      	ldr	r3, [r5, r3]
 8002d50:	4798      	blx	r3
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	00b3      	lsls	r3, r6, #2
 8002d58:	58eb      	ldr	r3, [r5, r3]
 8002d5a:	4798      	blx	r3
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08002e88 	.word	0x08002e88
 8002d64:	08002e88 	.word	0x08002e88
 8002d68:	08002e88 	.word	0x08002e88
 8002d6c:	08002e8c 	.word	0x08002e8c

08002d70 <memset>:
 8002d70:	0003      	movs	r3, r0
 8002d72:	1812      	adds	r2, r2, r0
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d100      	bne.n	8002d7a <memset+0xa>
 8002d78:	4770      	bx	lr
 8002d7a:	7019      	strb	r1, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	e7f9      	b.n	8002d74 <memset+0x4>

08002d80 <_init>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr

08002d8c <_fini>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d92:	bc08      	pop	{r3}
 8002d94:	469e      	mov	lr, r3
 8002d96:	4770      	bx	lr
